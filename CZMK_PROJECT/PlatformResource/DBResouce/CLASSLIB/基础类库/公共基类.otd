<?xml version="1.0" encoding="GB2312"?><!-- edited with XMLSpy v2005 rel. 3 U (http://www.altova.com) by  () --><!-- edited with XMLSPY v5 rel. 4 U (http://www.xmlspy.com) by zhoujin (HollySys) --><ClassFamily SchemaVersion="20050920" CreateDate="2005-06-02" Creator="zhoujin" xsi:noNamespaceSchemaLocation="..\..\..\PublicProject\debug\bin\CEConfig\OORTDBXML.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<ClassFamilyName>公共基类</ClassFamilyName>
	<Des/>
	<ClassFamilyInfo>
		<DLL>Point</DLL>
	</ClassFamilyInfo>
	<ClassFamilyVersion>1278923070</ClassFamilyVersion>
	<comment/>
	<ClassList>
		<Class>
			<ClassID Name="POINT" TagName="数据库点基类" GlobalName="POINT" Description="根：是所有数据库点的公共基类"/>
			<ClassInfo>
				<Instanteable>不可实例化</Instanteable>
			</ClassInfo>
			<ClassVersion>1278923069</ClassVersion>
			<comment/>
			<ClassPropertyList>
				<ClassPropertyVersion>1278923069</ClassPropertyVersion>
				<ClassProperty>
					<ClassPropertyID Name="name" TagName="点名" Description="为该点在数据库单元内部的唯一标识，在实例编辑时录入，运行中具有只读属性"/>
					<comment/>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>参数项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType>
						<TypeName>STRING16</TypeName>
						<Default/>
						<Min/>
						<Max/>
						<Enum/>
					</BasicType>
				</ClassProperty>
				<ClassProperty>
					<ClassPropertyID Name="pid" TagName="点号" Description="为该点在整个分布式对象数据库中的唯一标识，高2字节为数据库单元标识ID，实例配置时由实例编辑器自动分配并保证唯一，运行时具有只读属性"/>
					<comment/>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>参数项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType>
						<TypeName>INT32</TypeName>
						<Default/>
						<Min>1</Min>
						<Max/>
						<Enum/>
					</BasicType>
				</ClassProperty>
				<ClassProperty><ClassPropertyID TagName="点描述" Description="存放点或设备的说明性文字" Name="label"/>
					<comment/>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>参数项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType>
						<TypeName>STRING64</TypeName>
						<Default/>
						<Min/>
						<Max/>
						<Enum/>
					</BasicType>
				</ClassProperty>
				<ClassProperty><ClassPropertyID TagName="完整点描述" Description="对于全局对象，等同于label；对于子对象，为父对象点描述与自身点描述的综合。该项实际并不存在，而是访问时自动生成，并不可修改" Name="fullLabel"/>
					<comment>对象数据库为层次性结构，对于子对象，其自身的点描述项（label）只包含局部信息，全描述信息构成应为：父对象点描述信息 + …… + 子对象点描述信息，其中父对象可以有多层。</comment>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>不可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>参数项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType>
						<TypeName>STRING32</TypeName>
						<Default/>
						<Min/>
						<Max/>
						<Enum/>
					</BasicType>
				</ClassProperty>
				<ClassProperty><ClassPropertyID TagName="全局点名" Description="为该点在整个项目中的唯一标识，格式为：数据库单元ID:点名。对于全局对象，点名存储于name属性项；对于子对象，为父对象全局点名+子对象属性名。该项实际并不存在，而是访问时自动生成，并不可修改" Name="fullName"/>
					<comment>对于子对象，其自身的点名项（name）为空，全局点名构成应为：数据库单元ID:全局顶层父对象点名 + …… + 子对象属性名，其中全局顶层父对象点名在实例配置时录入，存储于name属性中。</comment>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>不可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>参数项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType>
						<TypeName>STRING32</TypeName>
						<Default/>
						<Min/>
						<Max/>
						<Enum/>
					</BasicType>
				</ClassProperty></ClassPropertyList>
			<ClassBehavior>
				<CommandList/>
				<OnEventList/>
				<ReDefOnEventList/>
				<OutEventList>
					<OutEvent><FunctionName>EndCreate</FunctionName><FunctionDes>创建对象并装载配置数据完成后输出该事件，在对象的initialize虚函数调用后被输出。</FunctionDes>
						<comment/>
						<ParamMode>无参数</ParamMode>
					</OutEvent></OutEventList>
				<VirtualInterfaceList>
					<VirtualInterface>
						<FunctionName>simulate</FunctionName>
						<FunctionDes>测试仿真接口</FunctionDes>
						<comment/>
						<FuncParamTable/>
						<ReturnValue>
							<Type>void</Type>
							<Des/>
						</ReturnValue>
					</VirtualInterface>
					<VirtualInterface>
						<FunctionName>sync_period</FunctionName>
						<FunctionDes>获取该点正本和副本之间的同步周期,为基准同步周期的整数倍，用于订阅数据的同步</FunctionDes>
						<comment>基类缺省实现为：
开关量DIG_Sync_Period = 2,表示同步周期的2倍，一般为1s，推荐用于开关量，如DI；
模拟量ANA_Sync_Period = 4,表示同步周期的4倍，一般为2s，推荐用于模拟量，如AI；
缺省DEF_Sync_Period = 8，表示同步周期的8倍，一般为4s，用于非采集变量，如设备、统计点等;</comment>
						<FuncParamTable/>
						<ReturnValue>
							<Type>unsigned short</Type>
							<Des>返回该类点的同步周期</Des>
						</ReturnValue>
					</VirtualInterface>
					<VirtualInterface>
						<FunctionName>is_valid</FunctionName>
						<FunctionDes>验证属性间的耦合关系是否正确，如：量程上限&gt;量程下限，提供给实例编辑器核查用</FunctionDes>
						<comment/>
						<FuncParamTable>
							<FuncParamItem>
								<Name>errMsg</Name>
								<Des>返回错误信息，用于实例编辑器输出以提示组态工程师</Des>
								<ValueType>std::string&amp;</ValueType>
								<comment/>
							</FuncParamItem>
						</FuncParamTable>
						<ReturnValue>
							<Type>bool</Type>
							<Des>true符合，false不符合</Des>
						</ReturnValue>
					</VirtualInterface>
					<VirtualInterface>
						<FunctionName>do_setItem</FunctionName>
						<FunctionDes>写简单属性，缺省实现将给定值写入正本中</FunctionDes>
						<comment/>
						<FuncParamTable>
							<FuncParamItem>
								<Name>szItem</Name>
								<Des>原子属性项名字符串</Des>
								<ValueType>std::string&amp;</ValueType>
								<comment>不支持向量和表，只能为原子属性</comment>
							</FuncParamItem>
							<FuncParamItem>
								<Name>buf</Name>
								<Des>给定值变量或缓冲区首地址</Des>
								<ValueType>const char *</ValueType>
								<comment>首地址与长度必须正确，否则将导致应用程序异常</comment>
							</FuncParamItem>
							<FuncParamItem>
								<Name>size</Name>
								<Des>给定值变量或缓冲区的长度</Des>
								<ValueType>unsigned int</ValueType>
								<comment>一般通过sizeof获得</comment>
							</FuncParamItem>
						</FuncParamTable>
						<ReturnValue>
							<Type>bool</Type>
							<Des>true写操作成功，false失败</Des>
						</ReturnValue>
					</VirtualInterface>
					<VirtualInterface>
						<FunctionName>initialize</FunctionName>
						<FunctionDes>初始化接口</FunctionDes>
						<comment>对象的部分属性是根据相关属性经过内部逻辑处理而得来的，当对象构建完成后将调用该接口以确保对象属性间的关系正确</comment>
						<FuncParamTable/>
						<ReturnValue>
							<Type>void</Type>
							<Des/>
						</ReturnValue>
					</VirtualInterface>
					<VirtualInterface><FunctionName>destroy</FunctionName><FunctionDes>删除接口</FunctionDes>
						<comment>对象析构将将调用该接口</comment>
						<FuncParamTable/>
						<ReturnValue>
							<Type>void</Type>
							<Des/>
						</ReturnValue>
					</VirtualInterface>
<VirtualInterface><FunctionName>GetFullLabel</FunctionName><FunctionDes>获取自己的全描述信息，默认构成为: [父对象点描述] 点描述</FunctionDes>
						<comment/>
						<FuncParamTable/>
						<ReturnValue>
							<Type>std::string</Type>
							<Des>获取的fullLable属性值</Des>
						</ReturnValue>
					</VirtualInterface></VirtualInterfaceList>
				<OverLoadList/>
				<ClassBehaviorVersion>1259319805</ClassBehaviorVersion>
			</ClassBehavior>
		</Class>
		<Class CreateDate="2005-09-26" Creator="zhoujin"><ClassID TagName="变量超类" Description="为所有测点类的基类" Name="Variable" GlobalName="Variable"/>
			<ClassInfo>
				<BaseClassRef GlobalName="POINT" RefVersion="1"/>
				<Instanteable>不可实例化</Instanteable>
			</ClassInfo>
			<ClassVersion>1276161075</ClassVersion>
			<comment></comment>
			<ClassPropertyList>
				<ClassPropertyVersion>1242616048</ClassPropertyVersion>
				<ClassProperty>
					<ClassPropertyID Name="status" TagName="数据状态" Description="0初始、1自由采集、2无效、4强制、8禁止"/>
					<comment/>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>不可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>实时项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType>
						<TypeName>INT8</TypeName>
						<Default>0</Default>
						<Min/>
						<Max/>
						<Enum>
							<EnumItem Value="0" TagValue="初始"/>
							<EnumItem Value="1" TagValue="有效"/>
							<EnumItem Value="2" TagValue="无效"/></Enum>
					</BasicType>
				</ClassProperty>
				<ClassProperty>
					<ClassPropertyID Name="previousStatus" TagName="前次状态" Description=""/>
					<comment/>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>不可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>实时项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType>
						<TypeName>INT8</TypeName>
						<Default>0</Default>
						<Min/>
						<Max/>
						<Enum>
							<EnumItem Value="0" TagValue="初始"/>
							<EnumItem Value="1" TagValue="有效"/>
							<EnumItem Value="2" TagValue="无效"/></Enum>
					</BasicType>
				</ClassProperty>
				<ClassProperty>
					<ClassPropertyID Name="valueTime" TagName="采集时间" Description=""/>
					<comment/>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>不可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>实时项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType>
						<TypeName>TIME</TypeName>
						<Default/>
						<Min/>
						<Max/>
						<Enum/>
					</BasicType>
				</ClassProperty>
				<ClassProperty>
					<ClassPropertyID Name="valueDisplay" TagName="文字值" Description="是当前值的字符串形式，并根据常用方式附加数据质量、单位等信息"/>
					<comment>对模拟量，文字值格式为：值+单位+数据状态，如"80.0℃ (U)"；数据状态为：空表示正常，(U)表示无效,(M)表示强制,(S)表示禁止,(屏蔽)表示屏蔽，(初始)表示初始</comment>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>不可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>实时项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType>
						<TypeName>STRING32</TypeName>
						<Default/>
						<Min/>
						<Max/>
						<Enum/>
					</BasicType>
				</ClassProperty>
				<ClassProperty><ClassPropertyID Description="" Name="externTag" TagName="外部变量名"/>
					<comment/>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>参数项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType><TypeName>STRING16</TypeName><Default></Default><Min></Min><Max></Max><Enum/></BasicType></ClassProperty></ClassPropertyList>
			<ClassBehavior>
				<CommandList/>
				<OnEventList/>
				<ReDefOnEventList/>
				<OutEventList>
					<OutEvent><FunctionName>ValueChanged</FunctionName><FunctionDes>值变化事件</FunctionDes>
						<comment>一旦当前值value变化超过死区或状态status发生改变就产生该事件</comment>
						<ParamMode>公共参数表引用</ParamMode>
						<CommonParamTableRef GlobalName="ValueChanged_P" RefVersion="1"/>
					</OutEvent>
				
<OutEvent><FunctionName>StatusChanged</FunctionName><FunctionDes>状态变化事件</FunctionDes>
						<comment>变量状态变化即产生此事件</comment>
						<ParamMode>公共参数表引用</ParamMode>
					
<CommonParamTableRef GlobalName="StatusChanged_P" RefVersion="1"/></OutEvent></OutEventList>
				<VirtualInterfaceList>
					<VirtualInterface><FunctionName>DataScan</FunctionName><FunctionDes>数据采集，将接收的数据写入数据库对象</FunctionDes>
						<comment>对输入输出变量，数据来源于I/O服务器</comment>
						<FuncParamTable>
							<FuncParamItem>
								<Name>time</Name><Des>采集时间</Des>
								<ValueType>MACS_TIME&amp;</ValueType>
								<comment/>
							</FuncParamItem>
							<FuncParamItem>
								<Name>status</Name><Des>状态，反映数据质量</Des>
								<ValueType>MACS_INT8</ValueType>
								<comment/>
							</FuncParamItem>
							<FuncParamItem>
								<Name>vaule_len</Name><Des>值长度</Des>
								<ValueType>int</ValueType>
								<comment/>
							</FuncParamItem>
							<FuncParamItem>
								<Name>pValue</Name><Des>值首地址指针</Des>
								<ValueType>void*</ValueType>
								<comment/>
							</FuncParamItem>
						</FuncParamTable>
						<ReturnValue>
							<Type>int</Type>
							<Des>0成功，-1值长度不对</Des>
						</ReturnValue>
					</VirtualInterface>
					<VirtualInterface><FunctionName>write_ioconfig</FunctionName><FunctionDes>将本点的外部通道配置数据写入给定的文件</FunctionDes>
						<comment>用于生成对象OID与TagID映射关系表</comment>
						<FuncParamTable>
							<FuncParamItem>
								<Name>ofs</Name><Des>输出文件流</Des>
								<ValueType>std::ofstream&amp;</ValueType>
								<comment/>
							</FuncParamItem>
						</FuncParamTable>
						<ReturnValue>
							<Type>int</Type>
							<Des>写入TagID个数,为1</Des>
						</ReturnValue>
					</VirtualInterface></VirtualInterfaceList>
				<OverLoadList>
					<OverLoad>
						<ClassRef>POINT</ClassRef>
						<FunctionName>do_setItem</FunctionName><FuncType>虚函数</FuncType>
						<Des>如果修改项为"当前值"，对于外部变量需要直接将命令转发为FEP，内部变量则由派生类处理</Des>
					</OverLoad>
				
<OverLoad>
						<ClassRef>POINT</ClassRef>
						<FunctionName>initialize</FunctionName><FuncType>虚函数</FuncType>
						<Des>如果外部标签为空，表明该变量为本地使用，需要进行一次初始采集，将基本数据状态从初始态转换为有效态</Des>
					</OverLoad>
				</OverLoadList>
				<ClassBehaviorVersion>1276161075</ClassBehaviorVersion>
			</ClassBehavior>
		</Class></ClassList>
</ClassFamily>