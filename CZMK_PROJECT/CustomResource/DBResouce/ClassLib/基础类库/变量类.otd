<?xml version="1.0" encoding="GB2312"?>
<!-- edited with XMLSpy v2005 rel. 3 U (http://www.altova.com) by  () -->
<!-- edited with XMLSPY v5 rel. 4 U (http://www.xmlspy.com) by zhoujin (HollySys) -->
<ClassFamily CreateDate="2005-06-02" Creator="zhoujin" xsi:noNamespaceSchemaLocation="F:\MACS-SCADA_SUD\PublicProject\debug\bin\CEConfig\OORTDBXML.xsd" SchemaVersion="20050920" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<ClassFamilyName>变量类</ClassFamilyName>
	<Des>变量类家族包括了输入变量、输出变量、报警变量、统计变量等。</Des>
	<ClassFamilyInfo>
		<DLL>Variable</DLL>
	</ClassFamilyInfo>
	<ClassFamilyVersion>1305515018</ClassFamilyVersion>
	<comment/>
	<ClassList>
		<Class>
			<ClassID Name="AI" TagName="模拟量输入点" GlobalName="AI" Description="值类型为FLOAT的变量"/>
			<ClassInfo>
				<BaseClassRef GlobalName="Variable" RefVersion="1"/>
				<Instanteable>可实例化</Instanteable>
			</ClassInfo>
			<ClassVersion>1242625507</ClassVersion>
			<comment>本类点用于采集I/O服务器上的模拟量点，采集值和有效/无效状态来自FEP。</comment>
			<ClassPropertyList>
				<ClassPropertyVersion>1226909777</ClassPropertyVersion>
				<ClassProperty>
					<ClassPropertyID Description="" Name="value" TagName="当前值"/>
					<comment/>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>不可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>实时项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType>
						<TypeName>FLOAT</TypeName>
						<Default/>
						<Min/>
						<Max/>
						<Enum/>
					</BasicType>
					<HDBItemConfig>
						<ValueTime ConfigValue="valueTime" ConfigType="属性名"/>
						<ValueState ConfigValue="status" ConfigType="属性名"/>
						<UT ConfigValue="UT" ConfigType="属性名"/>
						<OF ConfigValue="OF" ConfigType="属性名"/>
						<UpLimit ConfigValue="MU" ConfigType="属性名"/>
						<DownLimit ConfigValue="MD" ConfigType="属性名"/>
						<DeadZone ConfigValue="valueDZ" ConfigType="属性名"/>
						<DeadZoneType>百分比</DeadZoneType>
					</HDBItemConfig>
				</ClassProperty>
				<ClassProperty>
					<ClassPropertyID Description="" Name="previousValue" TagName="前次值"/>
					<comment/>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>不可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>实时项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType>
						<TypeName>FLOAT</TypeName>
						<Default/>
						<Min/>
						<Max/>
						<Enum/>
					</BasicType>
				</ClassProperty>
				<ClassProperty>
					<ClassPropertyID Description="" Name="MU" TagName="量程上限"/>
					<comment/>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>参数项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType>
						<TypeName>FLOAT</TypeName>
						<Default/>
						<Min/>
						<Max/>
						<Enum/>
					</BasicType>
				</ClassProperty>
				<ClassProperty>
					<ClassPropertyID Description="" Name="MD" TagName="量程下限"/>
					<comment/>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>参数项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType>
						<TypeName>FLOAT</TypeName>
						<Default/>
						<Min/>
						<Max/>
						<Enum/>
					</BasicType>
				</ClassProperty>
				<ClassProperty>
					<ClassPropertyID Description="" Name="OF" TagName="显示格式"/>
					<comment>C++支持的显示格式字符串，如"%6.3f"，必须与值类型相匹配</comment>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>参数项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType>
						<TypeName>STRING8</TypeName>
						<Default/>
						<Min/>
						<Max/>
						<Enum/>
					</BasicType>
				</ClassProperty>
				<ClassProperty>
					<ClassPropertyID Description="" Name="UT" TagName="单位（量纲）"/>
					<comment/>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>参数项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType>
						<TypeName>STRING8</TypeName>
						<Default/>
						<Min/>
						<Max/>
						<Enum/>
					</BasicType>
				</ClassProperty>
				<ClassProperty>
					<ClassPropertyID Description="缺省0.5%量程" Name="valueDZ" TagName="传输变化死区"/>
					<comment>只有当值的变化超过阈值(MU-MD)*valueDZ后才会进行传输，用于FEP向对象数据库传送采集值</comment>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>参数项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType>
						<TypeName>FLOAT</TypeName>
						<Default/>
						<Min/>
						<Max/>
						<Enum/>
					</BasicType>
				</ClassProperty>
				<ClassProperty>
					<ClassPropertyID Description="报警监视条件, 引用ALMA类对象及其子类对象" Name="limitAlarm" TagName="越限报警"/>
					<comment/>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>参数项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>子对象</ValueType>
					<SubObjClassRef GlobalName="ALMA" RefVersion="1"/>
				</ClassProperty>
				<ClassProperty>
					<ClassPropertyID Description="" Name="MaxMinVariable" TagName="最值统计变量"/>
					<comment/>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>参数项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>子对象</ValueType>
					<SubObjClassRef GlobalName="Stat_MaxMin" RefVersion="1"/>
				</ClassProperty>
				<ClassProperty>
					<ClassPropertyID Description="" Name="overStatus" TagName="超量程状态"/>
					<comment>记录当前值是否越过量程上下限，如果超出则将产生超量程事件</comment>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>不可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>实时项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType>
						<TypeName>INT8</TypeName>
						<Default/>
						<Min/>
						<Max/>
						<Enum/>
					</BasicType>
				</ClassProperty>
			</ClassPropertyList>
			<ClassBehavior>
				<CommandList>
					<Command>
						<FunctionName>Force</FunctionName>
						<FunctionDes>强制</FunctionDes>
						<comment/>
						<FuncParamTable>
							<FuncParamItem>
								<Name>user</Name>
								<Des>操作员名</Des>
								<ValueType>string</ValueType>
								<TransDirection>in</TransDirection>
								<comment/>
							</FuncParamItem>
							<FuncParamItem>
								<Name>pid</Name>
								<Des>被强制点的点号</Des>
								<ValueType>long</ValueType>
								<TransDirection>in</TransDirection>
								<comment/>
							</FuncParamItem>
							<FuncParamItem>
								<Name>start_or_end</Name>
								<Des>强制开始还是取消强制，true强制，false取消</Des>
								<ValueType>boolean</ValueType>
								<TransDirection>in</TransDirection>
								<comment/>
							</FuncParamItem>
							<FuncParamItem>
								<Name>val</Name>
								<Des>给定的强制值，只有当start_or_end为true时有意义</Des>
								<ValueType>float</ValueType>
								<TransDirection>in</TransDirection>
								<comment/>
							</FuncParamItem>
						</FuncParamTable>
						<ReturnValue>
							<Type>long</Type>
							<Des>0成功，-1失败</Des>
						</ReturnValue>
					</Command>
					<Command>
						<FunctionName>Forbid</FunctionName>
						<FunctionDes>禁止</FunctionDes>
						<comment/>
						<FuncParamTable>
							<FuncParamItem>
								<Name>user</Name>
								<Des>操作员名</Des>
								<ValueType>string</ValueType>
								<TransDirection>in</TransDirection>
								<comment/>
							</FuncParamItem>
							<FuncParamItem>
								<Name>pid</Name>
								<Des>被控点的点号</Des>
								<ValueType>long</ValueType>
								<TransDirection>in</TransDirection>
								<comment/>
							</FuncParamItem>
							<FuncParamItem>
								<Name>start_or_end</Name><Des>禁止开始还是取消禁止，true禁止，false取消</Des>
								<ValueType>boolean</ValueType>
								<TransDirection>in</TransDirection>
								<comment/>
							</FuncParamItem>
						</FuncParamTable>
						<ReturnValue>
							<Type>long</Type>
							<Des>0成功，-1失败</Des>
						</ReturnValue>
					</Command>
				</CommandList>
				<OnEventList/>
				<ReDefOnEventList/>
				<OutEventList/>
				<VirtualInterfaceList>
				</VirtualInterfaceList>
				<OverLoadList>
					<OverLoad>
						<ClassRef>POINT</ClassRef>
						<FunctionName>do_setItem</FunctionName>
						<FuncType>虚函数</FuncType>
						<Des>负责处理直接修改内部变量的当前值，其它由基类处理</Des>
					</OverLoad>
					<OverLoad>
						<ClassRef>POINT</ClassRef>
						<FunctionName>sync_period</FunctionName>
						<FuncType>虚函数</FuncType>
						<Des>模拟量的同步周期为基准周期的4倍，一般2秒</Des>
					</OverLoad>
					<OverLoad>
						<ClassRef>POINT</ClassRef>
						<FunctionName>is_valid</FunctionName>
						<FuncType>虚函数</FuncType>
						<Des>验证量程上限MU是否大于量程下限MD，如MU&lt;=MD则返回false，错误信息为“量程上限MU必须大于量程下限MD”</Des>
					</OverLoad>
					<OverLoad>
						<ClassRef>Variable</ClassRef>
						<FunctionName>ValueChanged</FunctionName>
						<FuncType>输出事件</FuncType>
						<Des>判断是否创建最值统计变量子对象，如果是，则调用Stat_MaxMin类中的虚函数MaxMinValueUpdate，最后调用基类ValueChanged函数</Des>
					</OverLoad>
					<OverLoad>
						<ClassRef>Variable</ClassRef>
						<FunctionName>DataScan</FunctionName>
						<FuncType>虚函数</FuncType>
						<Des>vaule_len应为sizeof(MACS_FLOAT),pValue实际值为 *(MACS_FLOAT*)pValue</Des>
					</OverLoad>
					<OverLoad>
						<ClassRef>Variable</ClassRef>
						<FunctionName>write_ioconfig</FunctionName>
						<FuncType>虚函数</FuncType>
						<Des/>
					</OverLoad>
				</OverLoadList>
				<ClassBehaviorVersion>1242625507</ClassBehaviorVersion>
			</ClassBehavior>
		</Class>
		<Class>
			<ClassID Name="DI" TagName="(单位)开关量输入点" GlobalName="DI" Description=""/>
			<ClassInfo>
				<BaseClassRef GlobalName="Variable" RefVersion="1"/>
				<Instanteable>可实例化</Instanteable>
			</ClassInfo>
			<ClassVersion>1298623129</ClassVersion>
			<comment/>
			<ClassPropertyList>
				<ClassPropertyVersion>1298623129</ClassPropertyVersion>
				<ClassProperty>
					<ClassPropertyID Description="" Name="value" TagName="当前值"/>
					<comment/>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>不可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>实时项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType>
						<TypeName>INT8</TypeName>
						<Default/>
						<Min/>
						<Max/>
						<Enum/>
					</BasicType>
					<HDBItemConfig>
						<ValueTime ConfigValue="valueTime" ConfigType="属性名"/>
						<ValueState ConfigValue="status" ConfigType="属性名"/>
						<UT ConfigValue="" ConfigType="无"/>
						<OF ConfigValue="%d" ConfigType="默认值"/>
						<UpLimit ConfigValue="1" ConfigType="默认值"/>
						<DownLimit ConfigValue="0" ConfigType="默认值"/>
						<DeadZone ConfigValue="" ConfigType="无"/>
						<DeadZoneType>绝对值</DeadZoneType>
					</HDBItemConfig>
				</ClassProperty>
				<ClassProperty>
					<ClassPropertyID Description="" Name="previousValue" TagName="前次值"/>
					<comment/>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>不可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>实时项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType>
						<TypeName>INT8</TypeName>
						<Default/>
						<Min/>
						<Max/>
						<Enum/>
					</BasicType>
				</ClassProperty>
				<ClassProperty>
					<ClassPropertyID Description="" Name="E0" TagName="置0说明"/>
					<comment/>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>参数项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType>
						<TypeName>STRING16</TypeName>
						<Default/>
						<Min/>
						<Max/>
						<Enum/>
					</BasicType>
				</ClassProperty>
				<ClassProperty>
					<ClassPropertyID Description="" Name="E1" TagName="置1说明"/>
					<comment/>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>参数项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType>
						<TypeName>STRING16</TypeName>
						<Default/>
						<Min/>
						<Max/>
						<Enum/>
					</BasicType>
				</ClassProperty>
				<ClassProperty>
					<ClassPropertyID Description="报警监视条件，引用ALMD类对象及其子类对象" Name="cosAlarm" TagName="变位报警"/>
					<comment>对于每个开关量点，可以定义0/1报警，相应的报警条件和报警级定义在本子对象中，没有报警要求则子对象为空。对于双位开关的过渡状态和故障状态，系统缺省没有置为无效或报警，若需要进行报警则可从ALMD派生子类进行处理</comment>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>参数项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>子对象</ValueType>
					<SubObjClassRef GlobalName="ALMD" RefVersion="1"/>
				</ClassProperty>
				<ClassProperty>
					<ClassPropertyID Description="用于控制是否生成开关量变位日志，0(false)不生成，1(true)生成" Name="cosLog" TagName="是否生成变位日志"/>
					<comment/>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>参数项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType>
						<TypeName>LOGICAL</TypeName>
						<Default>1</Default>
						<Min>0</Min>
						<Max>1</Max>
						<Enum/>
					</BasicType>
				</ClassProperty>
			</ClassPropertyList>
			<ClassBehavior>
				<CommandList>
					<Command>
						<FunctionName>Force</FunctionName>
						<FunctionDes>强制</FunctionDes>
						<comment/>
						<FuncParamTable>
							<FuncParamItem>
								<Name>user</Name>
								<Des>操作员名</Des>
								<ValueType>string</ValueType>
								<TransDirection>in</TransDirection>
								<comment/>
							</FuncParamItem>
							<FuncParamItem>
								<Name>pid</Name>
								<Des>被强制点的点号</Des>
								<ValueType>long</ValueType>
								<TransDirection>in</TransDirection>
								<comment/>
							</FuncParamItem>
							<FuncParamItem>
								<Name>start_or_end</Name>
								<Des>强制开始还是取消强制，true强制，false取消</Des>
								<ValueType>boolean</ValueType>
								<TransDirection>in</TransDirection>
								<comment/>
							</FuncParamItem>
							<FuncParamItem>
								<Name>val</Name>
								<Des>给定的强制值，只有当start_or_end为true时有意义</Des>
								<ValueType>char</ValueType>
								<TransDirection>in</TransDirection>
								<comment/>
							</FuncParamItem>
						</FuncParamTable>
						<ReturnValue>
							<Type>long</Type>
							<Des>0成功，-1失败</Des>
						</ReturnValue>
					</Command>
					<Command>
						<FunctionName>Forbid</FunctionName>
						<FunctionDes>禁止</FunctionDes>
						<comment/>
						<FuncParamTable>
							<FuncParamItem>
								<Name>user</Name>
								<Des>操作员名</Des>
								<ValueType>string</ValueType>
								<TransDirection>in</TransDirection>
								<comment/>
							</FuncParamItem>
							<FuncParamItem>
								<Name>pid</Name>
								<Des>被控点的点号</Des>
								<ValueType>long</ValueType>
								<TransDirection>in</TransDirection>
								<comment/>
							</FuncParamItem>
							<FuncParamItem>
								<Name>start_or_end</Name><Des>禁止开始还是取消禁止，true禁止，false取消</Des>
								<ValueType>boolean</ValueType>
								<TransDirection>in</TransDirection>
								<comment/>
							</FuncParamItem>
						</FuncParamTable>
						<ReturnValue>
							<Type>long</Type>
							<Des>0成功，-1失败</Des>
						</ReturnValue>
					</Command>
				</CommandList>
				<OnEventList/>
				<ReDefOnEventList/>
				<OutEventList/>
				<VirtualInterfaceList>
				</VirtualInterfaceList>
				<OverLoadList>
					<OverLoad>
						<ClassRef>POINT</ClassRef>
						<FunctionName>do_setItem</FunctionName>
						<FuncType>虚函数</FuncType>
						<Des>负责处理直接修改内部变量的当前值，其它由基类处理</Des>
					</OverLoad>
					<OverLoad>
						<ClassRef>POINT</ClassRef>
						<FunctionName>sync_period</FunctionName>
						<FuncType>虚函数</FuncType>
						<Des>开关量的同步周期为基准周期的2倍，一般1秒</Des>
					</OverLoad>
					<OverLoad>
						<ClassRef>Variable</ClassRef>
						<FunctionName>ValueChanged</FunctionName>
						<FuncType>输出事件</FuncType>
						<Des/>
					</OverLoad>
					<OverLoad>
						<ClassRef>Variable</ClassRef>
						<FunctionName>DataScan</FunctionName>
						<FuncType>虚函数</FuncType>
						<Des>vaule_len应为sizeof(MACS_INT8),pValue实际值为 *(MACS_INT8*)pValue</Des>
					</OverLoad>
					<OverLoad>
						<ClassRef>Variable</ClassRef>
						<FunctionName>write_ioconfig</FunctionName>
						<FuncType>虚函数</FuncType>
						<Des/>
					</OverLoad>
				</OverLoadList>
				<ClassBehaviorVersion>1259582359</ClassBehaviorVersion>
			</ClassBehavior>
		</Class>
		<Class>
			<ClassID Name="DI2" TagName="(双位)开关量输入点" GlobalName="DI2" Description="派生自DI，只是增加了有关第2外部通道的属性"/>
			<ClassInfo>
				<BaseClassRef GlobalName="DI" RefVersion="1"/>
				<Instanteable>可实例化</Instanteable>
			</ClassInfo>
			<ClassVersion>1298878985</ClassVersion>
			<comment>00(0): 0状态,置00说明E0；01(1): 1状态,置01说明E1；10(2): 2状态,置10说明E2；11(3): 3状态, 置11说明E3</comment>
			<ClassPropertyList>
				<ClassPropertyVersion>1298623229</ClassPropertyVersion>
				<ClassProperty>
					<ClassPropertyID Name="externTag2" TagName="外部变量名2" Description=""/>
					<comment/>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>参数项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType>
						<TypeName>STRING16</TypeName>
						<Default/>
						<Min/>
						<Max/>
						<Enum/>
					</BasicType>
				</ClassProperty>
				<ClassProperty>
					<ClassPropertyID Description="" Name="E2" TagName="置2说明"/>
					<comment/>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>参数项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType>
						<TypeName>STRING16</TypeName>
						<Default/>
						<Min/>
						<Max/>
						<Enum/>
					</BasicType>
				</ClassProperty>
				<ClassProperty>
					<ClassPropertyID Description="" Name="E3" TagName="置3说明"/>
					<comment/>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>参数项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType>
						<TypeName>STRING16</TypeName>
						<Default/>
						<Min/>
						<Max/>
						<Enum/>
					</BasicType>
				</ClassProperty>
			</ClassPropertyList>
			<ClassBehavior>
				<CommandList/>
				<OnEventList/>
				<ReDefOnEventList/>
				<OutEventList/>
				<VirtualInterfaceList/>
				<OverLoadList>
					<OverLoad>
						<ClassRef>Variable</ClassRef>
						<FunctionName>DataScan</FunctionName>
						<FuncType>虚函数</FuncType>
						<Des>覆盖基类提供的实现，需要将2个通道的值转换为单一值</Des>
					</OverLoad>
					<OverLoad>
						<ClassRef>Variable</ClassRef>
						<FunctionName>write_ioconfig</FunctionName>
						<FuncType>虚函数</FuncType>
						<Des>将本点的2个外部通道配置数据写入给定的文件,返回2表示写入2个通道信息</Des>
					</OverLoad>
					<OverLoad>
						<ClassRef>POINT</ClassRef>
						<FunctionName>do_setItem</FunctionName>
						<FuncType>虚函数</FuncType>
						<Des>如果修改项为"当前值"，需要将给定值转换为双通道值并发送给I/O服务器</Des>
					</OverLoad>
					<OverLoad>
						<ClassRef>DI</ClassRef>
						<FunctionName>Force</FunctionName>
						<FuncType>命令</FuncType>
						<Des>重载以便转换为双通道的强制操作发送给FEP</Des>
					</OverLoad>
					<OverLoad>
						<ClassRef>DI</ClassRef>
						<FunctionName>Forbid</FunctionName>
						<FuncType>命令</FuncType>
						<Des>重载以便取消禁止后能自动召唤一次FEP采集值</Des>
					</OverLoad>
					<OverLoad>
						<ClassRef>Variable</ClassRef>
						<FunctionName>ValueChanged</FunctionName><FuncType>输出事件</FuncType>
						<Des>重载以实现双通道数字量采集变化后重新计算valueDisplay，与父类不同</Des>
					</OverLoad>
					<OverLoad>
						<ClassRef>POINT</ClassRef>
						<FunctionName>is_valid</FunctionName><FuncType>虚函数</FuncType>
						<Des>双位开关要求2个外部通道必须配置</Des>
					</OverLoad>
				</OverLoadList>
				<ClassBehaviorVersion>1230107457</ClassBehaviorVersion>
			</ClassBehavior>
		</Class>
		<Class>
			<ClassID Name="SI" TagName="字符串输入点" Description="" GlobalName="SI"/>
			<ClassInfo>
				<BaseClassRef GlobalName="Variable" RefVersion="1"/>
				<Instanteable>可实例化</Instanteable>
			</ClassInfo>
			<ClassVersion>1242625589</ClassVersion>
			<comment>本类点用于采集I/O服务器上的字符串信息，采集值和有效/无效状态来自I/O服务器。</comment>
			<ClassPropertyList>
				<ClassPropertyVersion>1226912039</ClassPropertyVersion>
				<ClassProperty>
					<ClassPropertyID Description="" Name="value" TagName="当前值"/>
					<comment/>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>不可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>实时项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType>
						<TypeName>STRING256</TypeName>
						<Default/>
						<Min/>
						<Max/>
						<Enum/>
					</BasicType>
				</ClassProperty>
				<ClassProperty>
					<ClassPropertyID Description="" Name="previousValue" TagName="前次值"/>
					<comment/>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>不可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>实时项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType>
						<TypeName>STRING256</TypeName>
						<Default/>
						<Min/>
						<Max/>
						<Enum/>
					</BasicType>
				</ClassProperty>
				<ClassProperty>
					<ClassPropertyID Description="当前值字符串长度，有效范围为0～256" Name="valueLength" TagName="字符串有效"/>
					<comment/>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>不可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>实时项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType>
						<TypeName>UINT32</TypeName>
						<Default/>
						<Min/>
						<Max/>
						<Enum/>
					</BasicType>
				</ClassProperty>
			</ClassPropertyList>
			<ClassBehavior>
				<CommandList>
					<Command>
						<FunctionName>Force</FunctionName>
						<FunctionDes>强制</FunctionDes>
						<comment/>
						<FuncParamTable>
							<FuncParamItem>
								<Name>user</Name>
								<Des>操作员名</Des>
								<ValueType>string</ValueType>
								<TransDirection>in</TransDirection>
								<comment/>
							</FuncParamItem>
							<FuncParamItem>
								<Name>pid</Name>
								<Des>被强制点的点号</Des>
								<ValueType>long</ValueType>
								<TransDirection>in</TransDirection>
								<comment/>
							</FuncParamItem>
							<FuncParamItem>
								<Name>start_or_end</Name>
								<Des>强制开始还是取消强制，true强制，false取消</Des>
								<ValueType>boolean</ValueType>
								<TransDirection>in</TransDirection>
								<comment/>
							</FuncParamItem>
							<FuncParamItem>
								<Name>val</Name>
								<Des>给定的强制值，只有当start_or_end为true时有意义</Des>
								<ValueType>string</ValueType>
								<TransDirection>in</TransDirection>
								<comment/>
							</FuncParamItem>
						</FuncParamTable>
						<ReturnValue>
							<Type>long</Type>
							<Des>0成功，-1失败</Des>
						</ReturnValue>
					</Command>
					<Command>
						<FunctionName>Forbid</FunctionName>
						<FunctionDes>禁止</FunctionDes>
						<comment/>
						<FuncParamTable>
							<FuncParamItem>
								<Name>user</Name>
								<Des>操作员名</Des>
								<ValueType>string</ValueType>
								<TransDirection>in</TransDirection>
								<comment/>
							</FuncParamItem>
							<FuncParamItem>
								<Name>pid</Name>
								<Des>被控点的点号</Des>
								<ValueType>long</ValueType>
								<TransDirection>in</TransDirection>
								<comment/>
							</FuncParamItem>
							<FuncParamItem>
								<Name>start_or_end</Name><Des>禁止开始还是取消禁止，true禁止，false取消</Des>
								<ValueType>boolean</ValueType>
								<TransDirection>in</TransDirection>
								<comment/>
							</FuncParamItem>
						</FuncParamTable>
						<ReturnValue>
							<Type>long</Type>
							<Des>0成功，-1失败</Des>
						</ReturnValue>
					</Command>
				</CommandList>
				<OnEventList/>
				<ReDefOnEventList/>
				<OutEventList/>
				<VirtualInterfaceList>
				</VirtualInterfaceList>
				<OverLoadList>
					<OverLoad>
						<ClassRef>POINT</ClassRef>
						<FunctionName>do_setItem</FunctionName>
						<FuncType>虚函数</FuncType>
						<Des>负责处理直接修改内部变量的当前值，其它由基类处理</Des>
					</OverLoad>
					<OverLoad>
						<ClassRef>Variable</ClassRef>
						<FunctionName>ValueChanged</FunctionName>
						<FuncType>输出事件</FuncType>
						<Des/>
					</OverLoad>
					<OverLoad>
						<ClassRef>POINT</ClassRef>
						<FunctionName>sync_period</FunctionName>
						<FuncType>虚函数</FuncType>
						<Des/>
					</OverLoad>
					<OverLoad>
						<ClassRef>Variable</ClassRef>
						<FunctionName>DataScan</FunctionName>
						<FuncType>虚函数</FuncType>
						<Des>vaule_len应为strlen( char*)pValue )，并且应小于等于256, pValue实际值为 (char*)pValue</Des>
					</OverLoad>
					<OverLoad>
						<ClassRef>Variable</ClassRef>
						<FunctionName>write_ioconfig</FunctionName>
						<FuncType>虚函数</FuncType>
						<Des/>
					</OverLoad>
				</OverLoadList>
				<ClassBehaviorVersion>1242625589</ClassBehaviorVersion>
			</ClassBehavior>
		</Class>
		<Class>
			<ClassID Name="VI" TagName="离散数字量输入点" GlobalName="VI" Description=""/>
			<ClassInfo>
				<BaseClassRef GlobalName="Variable" RefVersion="1"/>
				<Instanteable>可实例化</Instanteable>
			</ClassInfo>
			<ClassVersion>1300771923</ClassVersion>
			<comment>本类点用于采集I/O服务器上的数字量点，采集值和有效/无效状态来自I/O服务器。</comment>
			<ClassPropertyList>
				<ClassPropertyVersion>1300771923</ClassPropertyVersion>
				<ClassProperty>
					<ClassPropertyID Description="" Name="value" TagName="当前值"/>
					<comment/>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>不可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>实时项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType>
						<TypeName>INT32</TypeName>
						<Default/>
						<Min/>
						<Max/>
						<Enum/>
					</BasicType>
					<HDBItemConfig>
						<ValueTime ConfigValue="valueTime" ConfigType="属性名"/>
						<ValueState ConfigValue="status" ConfigType="属性名"/>
						<UT ConfigValue="" ConfigType="属性名"/>
						<OF ConfigValue="" ConfigType="属性名"/>
						<UpLimit ConfigValue="" ConfigType="属性名"/>
						<DownLimit ConfigValue="" ConfigType="属性名"/>
						<DeadZone ConfigValue="" ConfigType="属性名"/>
						<DeadZoneType>绝对值</DeadZoneType>
					</HDBItemConfig>
				</ClassProperty>
				<ClassProperty>
					<ClassPropertyID Description="" Name="previousValue" TagName="前次值"/>
					<comment/>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>不可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>实时项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType>
						<TypeName>INT32</TypeName>
						<Default/>
						<Min/>
						<Max/>
						<Enum/>
					</BasicType>
				</ClassProperty>
				<ClassProperty><ClassPropertyID Description="报警监视子对象，引用ALMV类对象及其子类对象" Name="cosAlarm" TagName="变位报警"/>
					<comment>对于每个value值，相应的报警条件和报警级定义在本子对象中，没有报警要求则子对象为空。</comment>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>参数项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>子对象</ValueType>
					<SubObjClassRef GlobalName="ALMV" RefVersion="1"/>
				</ClassProperty>
				<ClassProperty><ClassPropertyID Description="有效值应向前紧凑排列" TagName="值信息结构" Name="valueInfoTable"/>
					<comment>目前暂定为8维，待支持变长结构后再做修改</comment>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>参数项</RealTimeChar>
					</PropertyProcessChar>
					<Size>8</Size>
					<ValueType>结构</ValueType>
					<StructType>
						<Declaration>true</Declaration>
						<Struct>
							<StructID Name="LocalStruct" TagName="自定义结构" Description=" " GlobalName="VI_valueInfoTable_S"/>
							<StructVersion>1</StructVersion>
							<comment>
							</comment>
							<StructPropertyList>
								<StructProperty>
									<StructPropertyID Name="value" TagName="采集值" Description=""/>
									<comment/>
									<ValueType>INT32</ValueType>
								</StructProperty>
								<StructProperty>
									<StructPropertyID Name="label" TagName="值说明" Description=""/>
									<comment/>
									<ValueType>STRING32</ValueType>
								</StructProperty>
							</StructPropertyList>
						</Struct>
					</StructType>
				</ClassProperty>
				<ClassProperty><ClassPropertyID Description="用于控制是否生成数字量值变化日志，0(false)不生成，1(true)生成" TagName="是否生成值变化日志" Name="cosLog"/>
					<comment/>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>参数项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType>
						<TypeName>LOGICAL</TypeName>
						<Default>0</Default>
						<Min>0</Min>
						<Max>1</Max>
						<Enum/>
					</BasicType>
				</ClassProperty></ClassPropertyList>
			<ClassBehavior>
				<CommandList>
					<Command>
						<FunctionName>Force</FunctionName>
						<FunctionDes>强制</FunctionDes>
						<comment/>
						<FuncParamTable>
							<FuncParamItem>
								<Name>user</Name>
								<Des>操作员名</Des>
								<ValueType>string</ValueType>
								<TransDirection>in</TransDirection>
								<comment/>
							</FuncParamItem>
							<FuncParamItem>
								<Name>pid</Name>
								<Des>被强制点的点号</Des>
								<ValueType>long</ValueType>
								<TransDirection>in</TransDirection>
								<comment/>
							</FuncParamItem>
							<FuncParamItem>
								<Name>start_or_end</Name>
								<Des>强制开始还是取消强制，true强制，false取消</Des>
								<ValueType>boolean</ValueType>
								<TransDirection>in</TransDirection>
								<comment/>
							</FuncParamItem>
							<FuncParamItem>
								<Name>val</Name>
								<Des>给定的强制值，只有当start_or_end为true时有意义</Des>
								<ValueType>long</ValueType>
								<TransDirection>in</TransDirection>
								<comment/>
							</FuncParamItem>
						</FuncParamTable>
						<ReturnValue>
							<Type>long</Type>
							<Des>0成功，-1失败</Des>
						</ReturnValue>
					</Command>
					<Command>
						<FunctionName>Forbid</FunctionName>
						<FunctionDes>禁止</FunctionDes>
						<comment/>
						<FuncParamTable>
							<FuncParamItem>
								<Name>user</Name>
								<Des>操作员名</Des>
								<ValueType>string</ValueType>
								<TransDirection>in</TransDirection>
								<comment/>
							</FuncParamItem>
							<FuncParamItem>
								<Name>pid</Name>
								<Des>被控点的点号</Des>
								<ValueType>long</ValueType>
								<TransDirection>in</TransDirection>
								<comment/>
							</FuncParamItem>
							<FuncParamItem>
								<Name>start_or_end</Name><Des>禁止开始还是取消禁止，true禁止，false取消</Des>
								<ValueType>boolean</ValueType>
								<TransDirection>in</TransDirection>
								<comment/>
							</FuncParamItem>
						</FuncParamTable>
						<ReturnValue>
							<Type>long</Type>
							<Des>0成功，-1失败</Des>
						</ReturnValue>
					</Command>
				</CommandList>
				<OnEventList/>
				<ReDefOnEventList/>
				<OutEventList/>
				<VirtualInterfaceList>
				</VirtualInterfaceList>
				<OverLoadList>
					<OverLoad>
						<ClassRef>POINT</ClassRef>
						<FunctionName>do_setItem</FunctionName>
						<FuncType>虚函数</FuncType>
						<Des>负责处理直接修改内部变量的当前值，其它由基类处理</Des>
					</OverLoad>
					<OverLoad>
						<ClassRef>Variable</ClassRef>
						<FunctionName>ValueChanged</FunctionName>
						<FuncType>输出事件</FuncType>
						<Des/>
					</OverLoad>
					<OverLoad>
						<ClassRef>POINT</ClassRef>
						<FunctionName>sync_period</FunctionName>
						<FuncType>虚函数</FuncType>
						<Des/>
					</OverLoad>
					<OverLoad>
						<ClassRef>Variable</ClassRef>
						<FunctionName>DataScan</FunctionName>
						<FuncType>虚函数</FuncType>
						<Des>vaule_len应为sizeof(MACS_INT32), pValue实际值为 *(MACS_INT32*)pValue</Des>
					</OverLoad>
					<OverLoad>
						<ClassRef>Variable</ClassRef>
						<FunctionName>write_ioconfig</FunctionName>
						<FuncType>虚函数</FuncType>
						<Des/>
					</OverLoad>
				</OverLoadList>
				<ClassBehaviorVersion>1242625628</ClassBehaviorVersion>
			</ClassBehavior>
		</Class>
		<Class CreateDate="2008-11-18" Creator="zhoujin">
			<ClassID TagName="报警点超类" Description="报警点是从属于变量的点" Name="ALM" GlobalName="ALM"/>
			<ClassInfo>
				<BaseClassRef GlobalName="POINT" RefVersion="1"/>
				<Instanteable>可实例化</Instanteable>
			</ClassInfo>
			<ClassVersion>1243936807</ClassVersion>
			<comment/>
			<ClassPropertyList>
				<ClassPropertyVersion>1226907439</ClassPropertyVersion>
				<ClassProperty>
					<ClassPropertyID Name="alarmStatus" TagName="当前报警状态" Description="0-正常，1-报警"/>
					<comment/>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>不可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>实时项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType>
						<TypeName>INT8</TypeName>
						<Default/>
						<Min/>
						<Max/>
						<Enum/>
					</BasicType>
				</ClassProperty>
				<ClassProperty>
					<ClassPropertyID Name="alarmInhib" TagName="报警屏蔽状态" Description="0-自由，1-雪崩自动屏蔽，2-手动屏蔽"/>
					<comment>当报警被屏蔽后，对象数据库不再对该点进行报警监视和判断扫描。与报警服务提供的报警抑制不同</comment>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>不可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>实时项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType>
						<TypeName>INT8</TypeName>
						<Default/>
						<Min/>
						<Max/>
						<Enum/>
					</BasicType>
				</ClassProperty>
				<ClassProperty>
					<ClassPropertyID Description="当前报警的报警级（&gt;0），未报警则为0 ，通过调用子类提供的getCurAlarmLevel()虚函数获得" Name="curAlarmLevel" TagName="当前有效报警级"/>
					<comment>报警级数字越大表示越严重，外部可显示为“紧急、普通”等不同的描述文字。仿照OPC标准，规定：高81 -- 100，中高	61 -- 80，中41 -- 60，中低21 -- 40，低1 -- 20</comment>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>不可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>实时项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType>
						<TypeName>INT8</TypeName>
						<Default>0</Default>
						<Min>0</Min>
						<Max>128</Max>
						<Enum/>
					</BasicType>
				</ClassProperty>
				<ClassProperty>
					<ClassPropertyID Description="最近有效报警级别, 即使报警恢复后也保持，直到新报警产生，用于报警消失后的报警确认" TagName="最近有效报警级别" Name="recentAlarmLevel"/>
					<comment>报警级数字越大表示越严重，外部可显示为“紧急、普通”等不同的描述文字。仿照OPC标准，规定：高81 -- 100，中高	61 -- 80，中41 -- 60，中低21 -- 40，低1 -- 20</comment>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>不可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>实时项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType>
						<TypeName>INT8</TypeName>
						<Default>0</Default>
						<Min>0</Min>
						<Max>128</Max>
						<Enum/>
					</BasicType>
				</ClassProperty>
				<ClassProperty>
					<ClassPropertyID Description="最近有效报警类型, 即使报警恢复后也保持，直到新报警产生，用于报警消失后的报警确认" TagName="最近有效报警类型" Name="recentAlarmType"/>
					<comment/>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>不可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>实时项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType>
						<TypeName>INT16</TypeName>
						<Default>0</Default>
						<Min/>
						<Max/>
						<Enum/>
					</BasicType>
				</ClassProperty>
			</ClassPropertyList>
			<ClassBehavior>
				<CommandList>
					<Command>
						<FunctionName>Ack</FunctionName>
						<FunctionDes>报警确认</FunctionDes>
						<comment/>
						<FuncParamTable>
							<FuncParamItem>
								<Name>user</Name>
								<Des>操作员名</Des>
								<ValueType>string</ValueType>
								<TransDirection>in</TransDirection>
								<comment/>
							</FuncParamItem>
							<FuncParamItem>
								<Name>pid</Name>
								<Des>被确认报警点的点号</Des>
								<ValueType>long</ValueType>
								<TransDirection>in</TransDirection>
								<comment/>
							</FuncParamItem>
						</FuncParamTable>
						<ReturnValue>
							<Type>long</Type>
							<Des>0成功，-1失败</Des>
						</ReturnValue>
					</Command>
					<Command>
						<FunctionName>Inhib</FunctionName>
						<FunctionDes>报警屏蔽</FunctionDes>
						<comment>屏蔽该点的报警扫描和判断，直到解除屏蔽将不会再产生任何新的报警信息</comment>
						<FuncParamTable>
							<FuncParamItem>
								<Name>user</Name>
								<Des>操作员名</Des>
								<ValueType>string</ValueType>
								<TransDirection>in</TransDirection>
								<comment/>
							</FuncParamItem>
							<FuncParamItem>
								<Name>pid</Name>
								<Des>被屏蔽的报警点点号</Des>
								<ValueType>long</ValueType>
								<TransDirection>in</TransDirection>
								<comment/>
							</FuncParamItem>
							<FuncParamItem>
								<Name>start_or_end</Name>
								<Des>屏蔽开始还是结束，true屏蔽开始，false取消屏蔽</Des>
								<ValueType>boolean</ValueType>
								<TransDirection>in</TransDirection>
								<comment/>
							</FuncParamItem>
						</FuncParamTable>
						<ReturnValue>
							<Type>long</Type>
							<Des>0成功，-1失败</Des>
						</ReturnValue>
					</Command>
				</CommandList>
				<OnEventList/>
				<ReDefOnEventList/>
				<OutEventList>
					<OutEvent>
						<FunctionName>AlarmStatusChanged</FunctionName>
						<FunctionDes>报警状态变化，输入参数为变化前后的报警状态</FunctionDes>
						<comment/>
						<ParamMode>自定义参数表</ParamMode>
						<ParamTable>
							<ParamTableID Name="ParamTable" TagName="参数表" Description="" GlobalName="ALM_AlarmStatusChanged_P"/>
							<ParamTableVersion>1</ParamTableVersion>
							<comment/>
							<ParamItemList>
								<ParamItem>
									<TransDirection>in</TransDirection>
									<ParamItemID Name="curStatus" TagName="当前报警状态" Description=""/>
									<ValueType>INT8</ValueType>
									<comment/>
								</ParamItem>
								<ParamItem>
									<TransDirection>in</TransDirection>
									<ParamItemID Name="oldStatus" TagName="旧报警状态" Description=""/>
									<ValueType>INT8</ValueType>
									<comment/>
								</ParamItem>
								<ParamItem>
									<TransDirection>in</TransDirection>
									<ParamItemID Name="curAlarmLevel" TagName="当前报警级别" Description=""/>
									<ValueType>INT8</ValueType>
									<comment/>
								</ParamItem>
								<ParamItem>
									<TransDirection>in</TransDirection>
									<ParamItemID Name="oldAlarmLevel" TagName="旧报警级别" Description=""/>
									<ValueType>INT8</ValueType>
									<comment/>
								</ParamItem>
							</ParamItemList>
						</ParamTable>
					</OutEvent>
					<OutEvent>
						<FunctionName>Inhibed</FunctionName>
						<FunctionDes>报警屏蔽开始</FunctionDes>
						<comment/>
						<ParamMode>简单参数</ParamMode>
						<ParamItem>
							<TransDirection>in</TransDirection>
							<ParamItemID Name="inhibedType" TagName="报警屏蔽类型" Description="参数为屏蔽类型：1-雪崩自动屏蔽，2-手动屏蔽"/>
							<ValueType>INT32</ValueType>
							<comment/>
						</ParamItem>
					</OutEvent>
					<OutEvent>
						<FunctionName>InhibedEnd</FunctionName>
						<FunctionDes>报警屏蔽被解除</FunctionDes>
						<comment/>
						<ParamMode>简单参数</ParamMode>
						<ParamItem>
							<TransDirection>in</TransDirection>
							<ParamItemID Name="inhibedType" TagName="报警屏蔽类型" Description="参数为屏蔽类型：1-雪崩自动屏蔽，2-手动屏蔽"/>
							<ValueType>INT32</ValueType>
							<comment/>
						</ParamItem>
					</OutEvent>
				</OutEventList>
				<VirtualInterfaceList>
					<VirtualInterface>
						<FunctionName>judge</FunctionName>
						<FunctionDes>判断报警和报警恢复</FunctionDes>
						<comment>每当父对象值或状态改变时将调用相应报警子对象的报警判断方法</comment>
						<FuncParamTable/>
						<ReturnValue>
							<Type>void</Type>
							<Des/>
						</ReturnValue>
					</VirtualInterface>
					<VirtualInterface>
						<FunctionName>getCurAlarmLevel</FunctionName>
						<FunctionDes>纯虚函数，获取当前报警的报警级（&gt;0），未报警则返回0</FunctionDes>
						<comment>具体的报警实现类需要重载该函数，以返回正确的报警级。</comment>
						<FuncParamTable/>
						<ReturnValue>
							<Type>MACS_INT8</Type>
							<Des>&gt;0，有效报警级;
0，未报警</Des>
						</ReturnValue>
					</VirtualInterface>
					<VirtualInterface>
						<FunctionName>getCurAlarmType</FunctionName>
						<FunctionDes>纯虚函数，获取当前报警的报警类型（&gt;0），未报警则返回0</FunctionDes>
						<comment>具体的报警实现类需要重载该函数，以返回正确的报警类型。</comment>
						<FuncParamTable/>
						<ReturnValue>
							<Type>MACS_INT16</Type>
							<Des>&gt;0，有效报警类型;
0，未报警</Des>
						</ReturnValue>
					</VirtualInterface>
				</VirtualInterfaceList>
				<OverLoadList>
					<OverLoad>
						<ClassRef>POINT</ClassRef>
						<FunctionName>sync_period</FunctionName>
						<FuncType>虚函数</FuncType>
						<Des>报警点的同步周期应该与父对象相同</Des>
					</OverLoad>
					<OverLoad>
						<ClassRef>POINT</ClassRef>
						<FunctionName>initialize</FunctionName>
						<FuncType>虚函数</FuncType>
						<Des>进行初始报警判断</Des>
					</OverLoad>
				</OverLoadList>
				<ClassBehaviorVersion>1243936807</ClassBehaviorVersion>
			</ClassBehavior>
		</Class>
		<Class CreateDate="2008-11-18" Creator="zhoujin">
			<ClassID TagName="模拟量报警点" Description="派生自ALM，可以定义4个限值报警" Name="ALMA" GlobalName="ALMA"/>
			<ClassInfo>
				<BaseClassRef GlobalName="ALM" RefVersion="1"/>
				<Instanteable>可实例化</Instanteable>
			</ClassInfo>
			<ClassVersion>1305515018</ClassVersion>
			<comment/>
			<ClassPropertyList>
				<ClassPropertyVersion>1305515018</ClassPropertyVersion>
				<ClassProperty>
					<ClassPropertyID Name="HHighLimit" TagName="报警上上限" Description=""/>
					<comment>只有报警上上限和上上限报警级都设置为有效值才进行上上限报警，并要求报警上上限满足：有效报警下下限&lt;有效报警下限&lt;有效报警上限&lt;有效报警上上限。</comment>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>参数项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType>
						<TypeName>FLOAT</TypeName>
						<Default/>
						<Min/>
						<Max/>
						<Enum/>
					</BasicType>
				</ClassProperty>
				<ClassProperty>
					<ClassPropertyID Name="HHighLevel" TagName="报警上上限报警级" Description=""/>
					<comment>报警级数字越大表示越严重，外部可显示为“紧急、普通”等不同的描述文字。仿照OPC标准，规定：高81 -- 100，中高	61 -- 80，中41 -- 60，中低21 -- 40，低1 -- 20，0不报警</comment>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>参数项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType>
						<TypeName>INT8</TypeName>
						<Default>0</Default>
						<Min>0</Min>
						<Max>100</Max>
						<Enum>
							<EnumItem Value="0" TagValue="不报警"/>
							<EnumItem Value="1" TagValue="最低报警级"/>
							<EnumItem Value="20" TagValue="低报警级"/>
							<EnumItem Value="40" TagValue="中低报警级"/>
							<EnumItem Value="60" TagValue="中报警级"/>
							<EnumItem Value="80" TagValue="中高报警级"/>
							<EnumItem Value="100" TagValue="高报警级"/></Enum>
					</BasicType>
				</ClassProperty>
				<ClassProperty>
					<ClassPropertyID Name="highLimit" TagName="报警上限" Description=""/>
					<comment>只有报警上限和上限报警级都设置为有效值才进行上限报警，并要求报警上限满足：有效报警下下限&lt;有效报警下限&lt;有效报警上限&lt;有效报警上上限。</comment>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>参数项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType>
						<TypeName>FLOAT</TypeName>
						<Default/>
						<Min/>
						<Max/>
						<Enum/>
					</BasicType>
				</ClassProperty>
				<ClassProperty>
					<ClassPropertyID Name="highLevel" TagName="报警上限报警级" Description=""/>
					<comment>报警级数字越大表示越严重，外部可显示为“紧急、普通”等不同的描述文字。仿照OPC标准，规定：高81 -- 100，中高 61 -- 80，中41 -- 60，中低21 -- 40，低1 -- 20，0不报警</comment>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>参数项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType>
						<TypeName>INT8</TypeName>
						<Default>1</Default>
						<Min>0</Min>
						<Max>100</Max>
						<Enum>
							<EnumItem Value="1" TagValue="最低报警级"/>
							<EnumItem Value="20" TagValue="低报警级"/>
							<EnumItem Value="40" TagValue="中低报警级"/>
							<EnumItem Value="60" TagValue="中报警级"/>
							<EnumItem Value="80" TagValue="中高报警级"/>
							<EnumItem Value="100" TagValue="高报警级"/>
							<EnumItem Value="0" TagValue="不报警"/></Enum>
					</BasicType>
				</ClassProperty>
				<ClassProperty>
					<ClassPropertyID Name="lowLimit" TagName="报警下限" Description=""/>
					<comment>只有报警下限和下限报警级都设置为有效值才进行下限报警，并要求报警下限满足：有效报警下下限&lt;有效报警下限&lt;有效报警上限&lt;有效报警上上限。</comment>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>参数项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType>
						<TypeName>FLOAT</TypeName>
						<Default/>
						<Min/>
						<Max/>
						<Enum/>
					</BasicType>
				</ClassProperty>
				<ClassProperty>
					<ClassPropertyID Name="lowLevel" TagName="报警下限报警级" Description=""/>
					<comment>报警级数字越大表示越严重，外部可显示为“紧急、普通”等不同的描述文字。仿照OPC标准，规定：高81 -- 100，中高 61 -- 80，中41 -- 60，中低21 -- 40，低1 -- 20，0不报警</comment>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>参数项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType>
						<TypeName>INT8</TypeName>
						<Default>1</Default>
						<Min>0</Min>
						<Max>100</Max>
						<Enum>
							<EnumItem Value="1" TagValue="最低报警级"/>
							<EnumItem Value="20" TagValue="低报警级"/>
							<EnumItem Value="40" TagValue="中低报警级"/>
							<EnumItem Value="60" TagValue="中报警级"/>
							<EnumItem Value="80" TagValue="中高报警级"/>
							<EnumItem Value="100" TagValue="高报警级"/>
							<EnumItem Value="0" TagValue="不报警"/></Enum>
					</BasicType>
				</ClassProperty>
				<ClassProperty>
					<ClassPropertyID Name="LLowLimit" TagName="报警下下限" Description=""/>
					<comment>只有报警下下限和下下限报警级都设置为有效值才进行下下限报警，并要求报警下下限满足：有效报警下下限&lt;有效报警下限&lt;有效报警上限&lt;有效报警上上限。</comment>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>参数项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType>
						<TypeName>FLOAT</TypeName>
						<Default/>
						<Min/>
						<Max/>
						<Enum/>
					</BasicType>
				</ClassProperty>
				<ClassProperty>
					<ClassPropertyID Name="LLowLevel" TagName="报警下下限报警级" Description=""/>
					<comment>报警级数字越大表示越严重，外部可显示为“紧急、普通”等不同的描述文字。仿照OPC标准，规定：高81 -- 100，中高 61 -- 80，中41 -- 60，中低21 -- 40，低1 -- 20，0不报警</comment>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>参数项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType>
						<TypeName>INT8</TypeName>
						<Default>0</Default>
						<Min>0</Min>
						<Max>100</Max>
						<Enum>
							<EnumItem Value="0" TagValue="不报警"/>
							<EnumItem Value="1" TagValue="最低报警级"/>
							<EnumItem Value="20" TagValue="低报警级"/>
							<EnumItem Value="40" TagValue="中低报警级"/>
							<EnumItem Value="60" TagValue="中报警级"/>
							<EnumItem Value="80" TagValue="中高报警级"/>
							<EnumItem Value="100" TagValue="高报警级"/></Enum>
					</BasicType>
				</ClassProperty>
				<ClassProperty>
					<ClassPropertyID Name="deadZone" TagName="报警恢复死区值" Description="限值报警恢复的条件为：当前值&lt;上（上）限报警值-(量程上限-量程下限)*报警恢复死区&#xA;                      当前值&gt;下（下）限报警值+(量程上限-量程下限)*报警恢复死区"/>
					<comment/>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>参数项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType>
						<TypeName>FLOAT</TypeName>
						<Default>0.005</Default>
						<Min>0.0</Min>
						<Max/>
						<Enum/>
					</BasicType>
				</ClassProperty>
				<ClassProperty>
					<ClassPropertyID TagName="限值报警状态" Description="0-正常，1-下下限报警，2-下限确认，3-上限报警，4上上限报警" Name="limitAlarmStatus"/>
					<comment/>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>不可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>实时项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType>
						<TypeName>INT8</TypeName>
						<Default/>
						<Min/>
						<Max/>
						<Enum/>
					</BasicType>
				</ClassProperty>
				<ClassProperty><ClassPropertyID Description="" Name="alarmOutRange" TagName="超量程是否报警"/>
					<comment/>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>参数项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType><TypeName>LOGICAL</TypeName><Default>0</Default><Min>0</Min><Max>1</Max><Enum/></BasicType></ClassProperty></ClassPropertyList>
			<ClassBehavior>
				<CommandList>
					<Command>
						<FunctionName>LimitModify</FunctionName>
						<FunctionDes>修改报警限</FunctionDes>
						<comment/>
						<FuncParamTable>
							<FuncParamItem>
								<Name>user</Name>
								<Des>操作员名</Des>
								<ValueType>string</ValueType>
								<TransDirection>in</TransDirection>
								<comment/>
							</FuncParamItem>
							<FuncParamItem>
								<Name>pid</Name>
								<Des>待修改报警限值点的点号</Des>
								<ValueType>long</ValueType>
								<TransDirection>in</TransDirection>
								<comment/>
							</FuncParamItem>
							<FuncParamItem>
								<Name>index</Name>
								<Des>限值索引：1下下限，2下限，3上限，4上上限</Des>
								<ValueType>long</ValueType>
								<TransDirection>in</TransDirection>
								<comment/>
							</FuncParamItem>
							<FuncParamItem>
								<Name>limit</Name>
								<Des>给定限值</Des>
								<ValueType>float</ValueType>
								<TransDirection>in</TransDirection>
								<comment/>
							</FuncParamItem>
						</FuncParamTable>
						<ReturnValue>
							<Type>long</Type>
							<Des>0成功，-1失败</Des>
						</ReturnValue>
					</Command>
				</CommandList>
				<OnEventList/>
				<ReDefOnEventList/>
				<OutEventList>
					<OutEvent><FunctionName>LimitChanged</FunctionName><FunctionDes>报警限变化事件</FunctionDes>
						<comment/>
						<ParamMode>自定义参数表</ParamMode>
						<ParamTable>
							<ParamTableID Name="ParamTable" TagName="参数表" Description="" GlobalName="ALMA_LimitChanged_P"/>
							<ParamTableVersion>1</ParamTableVersion>
							<comment/>
							<ParamItemList>
								<ParamItem>
									<TransDirection>in</TransDirection>
									<ParamItemID Name="limitType" TagName="限制类型" Description="LLOW = 1, LOW = 2,HIGHT = 3,HHIGHT = 4"/>
									<ValueType>INT8</ValueType>
									<comment/>
								</ParamItem>
								<ParamItem>
									<TransDirection>in</TransDirection>
									<ParamItemID Name="curLimit" TagName="当前限制" Description=""/>
									<ValueType>FLOAT</ValueType>
									<comment/>
								</ParamItem>
								<ParamItem>
									<TransDirection>in</TransDirection>
									<ParamItemID Name="oldLimit" TagName="变化前的限制" Description=""/>
									<ValueType>FLOAT</ValueType>
									<comment/>
								</ParamItem>
							</ParamItemList>
						</ParamTable>
					</OutEvent></OutEventList>
				<VirtualInterfaceList/>
				<OverLoadList>
					<OverLoad>
						<ClassRef>ALM</ClassRef>
						<FunctionName>judge</FunctionName>
						<FuncType>虚函数</FuncType>
						<Des>模拟量限值报警实现体</Des>
					</OverLoad>
					<OverLoad>
						<ClassRef>POINT</ClassRef>
						<FunctionName>is_valid</FunctionName>
						<FuncType>虚函数</FuncType>
						<Des>验证多个报警限值间的大小关系</Des>
					</OverLoad>
					<OverLoad>
						<ClassRef>ALM</ClassRef>
						<FunctionName>getCurAlarmLevel</FunctionName>
						<FuncType>虚函数</FuncType>
						<Des/>
					</OverLoad>
					<OverLoad>
						<ClassRef>ALM</ClassRef>
						<FunctionName>getCurAlarmType</FunctionName>
						<FuncType>虚函数</FuncType>
						<Des/>
					</OverLoad>
				</OverLoadList>
				<ClassBehaviorVersion>1272594636</ClassBehaviorVersion>
			</ClassBehavior>
		</Class>
		<Class CreateDate="2008-11-18" Creator="zhoujin">
			<ClassID TagName="开关量报警点" Description="" Name="ALMD" GlobalName="ALMD"/>
			<ClassInfo>
				<BaseClassRef GlobalName="ALM" RefVersion="1"/>
				<Instanteable>可实例化</Instanteable>
			</ClassInfo>
			<ClassVersion>1280375277</ClassVersion>
			<comment/>
			<ClassPropertyList>
				<ClassPropertyVersion>1280375277</ClassPropertyVersion>
				<ClassProperty>
					<ClassPropertyID Name="alarmLevel" TagName="报警级" Description=""/>
					<comment>报警级数字越大表示越严重，外部可显示为“紧急、普通”等不同的描述文字。仿照OPC标准，规定：高81 -- 100，中高 61 -- 80，中41 -- 60，中低21 -- 40，低1 -- 20</comment>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>参数项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType>
						<TypeName>INT8</TypeName>
						<Default>1</Default>
						<Min>0</Min>
						<Max>100</Max>
						<Enum>
							<EnumItem Value="0" TagValue="不报警"/>
							<EnumItem Value="1" TagValue="最低报警级"/>
							<EnumItem Value="20" TagValue="低报警级"/>
							<EnumItem Value="40" TagValue="中低报警级"/>
							<EnumItem Value="60" TagValue="中报警级"/>
							<EnumItem Value="80" TagValue="中高报警级"/>
							<EnumItem Value="100" TagValue="高报警级"/></Enum>
					</BasicType>
				</ClassProperty>
				<ClassProperty>
					<ClassPropertyID Name="alarmRequire" TagName="报警要求" Description="0报警/1报警"/>
					<comment/>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>参数项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType>
						<TypeName>INT8</TypeName>
						<Default>0</Default>
						<Min>0</Min>
						<Max>1</Max>
						<Enum>
							<EnumItem Value="0" TagValue="0状态报警"/>
							<EnumItem Value="1" TagValue="1状态报警"/>
						</Enum>
					</BasicType>
				</ClassProperty>
			</ClassPropertyList>
			<ClassBehavior>
				<CommandList/>
				<OnEventList/>
				<ReDefOnEventList/>
				<OutEventList/>
				<VirtualInterfaceList/>
				<OverLoadList>
					<OverLoad>
						<ClassRef>ALM</ClassRef>
						<FunctionName>judge</FunctionName>
						<FuncType>虚函数</FuncType>
						<Des>开关量状态报警实现体</Des>
					</OverLoad>
					<OverLoad>
						<ClassRef>ALM</ClassRef>
						<FunctionName>getCurAlarmLevel</FunctionName>
						<FuncType>虚函数</FuncType>
						<Des/>
					</OverLoad>
					<OverLoad>
						<ClassRef>ALM</ClassRef>
						<FunctionName>getCurAlarmType</FunctionName><FuncType>虚函数</FuncType>
						<Des/>
					</OverLoad>
					<OverLoad>
						<ClassRef>POINT</ClassRef>
						<FunctionName>is_valid</FunctionName><FuncType>虚函数</FuncType>
						<Des>要求报警级不能为不报警</Des>
					</OverLoad>
				</OverLoadList>
				<ClassBehaviorVersion>1229915597</ClassBehaviorVersion>
			</ClassBehavior>
		</Class>
		<Class CreateDate="2008-11-18" Creator="zhoujin">
			<ClassID TagName="数字量报警点" Description="派生自ALM，离散值数字量报警" Name="ALMV" GlobalName="ALMV"/>
			<ClassInfo>
				<BaseClassRef GlobalName="ALM" RefVersion="1"/>
				<Instanteable>可实例化</Instanteable>
			</ClassInfo>
			<ClassVersion>1231833324</ClassVersion>
			<comment>父对象为数字量VI</comment>
			<ClassPropertyList>
				<ClassPropertyVersion>1230015065</ClassPropertyVersion>
				<ClassProperty>
					<ClassPropertyID Description="有效值应向前紧凑排列" Name="alarmTable" TagName="报警结构"/>
					<comment>目前暂定8维，待支持变长结构后再做修改；结构中暂不支持枚举</comment>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>参数项</RealTimeChar>
					</PropertyProcessChar>
					<Size>8</Size>
					<ValueType>结构</ValueType>
					<StructType>
						<Declaration>true</Declaration>
						<Struct>
							<StructID Name="LocalStruct" TagName="自定义结构" Description=" " GlobalName="ALMV_alarmTable_S"/>
							<StructVersion>1</StructVersion>
							<comment>
							</comment>
							<StructPropertyList>
								<StructProperty>
									<StructPropertyID Name="value" TagName="采集值" Description=""/>
									<comment/>
									<ValueType>INT32</ValueType>
								</StructProperty>
								<StructProperty>
									<StructPropertyID Name="alarmLevel" TagName="报警级" Description=""/>
									<comment/>
									<ValueType>INT8</ValueType>
								</StructProperty>
							</StructPropertyList>
						</Struct>
					</StructType>
				</ClassProperty>
			</ClassPropertyList>
			<ClassBehavior>
				<CommandList>
				</CommandList>
				<OnEventList/>
				<ReDefOnEventList/>
				<OutEventList/>
				<VirtualInterfaceList/>
				<OverLoadList>
					<OverLoad>
						<ClassRef>ALM</ClassRef>
						<FunctionName>judge</FunctionName>
						<FuncType>虚函数</FuncType>
						<Des>数字量报警实现体</Des>
					</OverLoad>
					<OverLoad>
						<ClassRef>ALM</ClassRef>
						<FunctionName>getCurAlarmLevel</FunctionName>
						<FuncType>虚函数</FuncType>
						<Des/>
					</OverLoad>
					<OverLoad>
						<ClassRef>POINT</ClassRef>
						<FunctionName>is_valid</FunctionName><FuncType>虚函数</FuncType>
						<Des>至少有一个有效报警值</Des>
					</OverLoad>
					<OverLoad>
						<ClassRef>ALM</ClassRef>
						<FunctionName>getCurAlarmType</FunctionName><FuncType>虚函数</FuncType>
						<Des/>
					</OverLoad>
					<OverLoad>
						<ClassRef>POINT</ClassRef>
						<FunctionName>initialize</FunctionName><FuncType>虚函数</FuncType>
						<Des>获得实际配置的有效报警个数</Des>
					</OverLoad>
				</OverLoadList>
				<ClassBehaviorVersion>1231833324</ClassBehaviorVersion>
			</ClassBehavior>
		</Class>
		<Class CreateDate="2008-11-18" Creator="zhoujin">
			<ClassID Description="带最大最小值统计的模拟量统计类" TagName="模拟量最值统计类" Name="Stat_MaxMin" GlobalName="Stat_MaxMin"/>
			<ClassInfo>
				<BaseClassRef GlobalName="::POINT" RefVersion="1"/>
				<Instanteable>可实例化</Instanteable>
			</ClassInfo>
			<ClassVersion>1289542350</ClassVersion>
			<comment>
			</comment>
			<ClassPropertyList>
				<ClassPropertyVersion>1289542349</ClassPropertyVersion>
				<ClassProperty>
					<ClassPropertyID Description="最大值" Name="maxValue" TagName="最大值"/>
					<comment>最大值</comment>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>不可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>实时项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType>
						<TypeName>FLOAT</TypeName>
						<Default/>
						<Min/>
						<Max/>
						<Enum/>
					</BasicType>
					<HDBItemConfig>
						<ValueTime ConfigValue="" ConfigType="无"/>
						<ValueState ConfigValue="" ConfigType="无"/>
						<UT ConfigValue="#.UT" ConfigType="属性名"/>
						<OF ConfigValue="#.OF" ConfigType="属性名"/>
						<UpLimit ConfigValue="#.MU" ConfigType="属性名"/>
						<DownLimit ConfigValue="#.MD" ConfigType="属性名"/>
						<DeadZone ConfigValue="#.valueDZ" ConfigType="属性名"/>
						<DeadZoneType>百分比</DeadZoneType>
					</HDBItemConfig>
				</ClassProperty>
				<ClassProperty>
					<ClassPropertyID Description="最小值" Name="minValue" TagName="最小值"/>
					<comment>最小值</comment>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>不可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>实时项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType>
						<TypeName>FLOAT</TypeName>
						<Default/>
						<Min/>
						<Max/>
						<Enum/>
					</BasicType>
					<HDBItemConfig>
						<ValueTime ConfigValue="" ConfigType="无"/>
						<ValueState ConfigValue="" ConfigType="无"/>
						<UT ConfigValue="#.UT" ConfigType="属性名"/>
						<OF ConfigValue="#.OF" ConfigType="属性名"/>
						<UpLimit ConfigValue="#.MU" ConfigType="属性名"/>
						<DownLimit ConfigValue="#.MD" ConfigType="属性名"/>
						<DeadZone ConfigValue="#.valueDZ" ConfigType="属性名"/>
						<DeadZoneType>百分比</DeadZoneType>
					</HDBItemConfig>
				</ClassProperty>
				<ClassProperty>
					<ClassPropertyID Description="最值强制复位时间" TagName="最值强制复位时间" Name="ValueFRT"/>
					<comment>最值强制复位时间</comment>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>不可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>实时项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType>
						<TypeName>TIME</TypeName>
						<Default/>
						<Min/>
						<Max/>
						<Enum/>
					</BasicType>
				</ClassProperty>
				<ClassProperty><ClassPropertyID Description="" Name="maxValueDay" TagName="日统计最大值"/>
					<comment/>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>实时项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType><TypeName>FLOAT</TypeName><Default></Default><Min></Min><Max></Max><Enum/></BasicType></ClassProperty>
				<ClassProperty><ClassPropertyID Description="" Name="maxValueMonth" TagName="月统计最大值"/>
					<comment/>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>实时项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType><TypeName>FLOAT</TypeName><Default></Default><Min></Min><Max></Max><Enum/></BasicType></ClassProperty>
				<ClassProperty><ClassPropertyID Description="" Name="maxValueYear" TagName="年统计最大值"/>
					<comment/>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>实时项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType><TypeName>FLOAT</TypeName><Default></Default><Min></Min><Max></Max><Enum/></BasicType></ClassProperty>
				<ClassProperty><ClassPropertyID Description="" Name="minValueDay" TagName="日统计最小值"/>
					<comment/>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>实时项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType><TypeName>FLOAT</TypeName><Default></Default><Min></Min><Max></Max><Enum/></BasicType></ClassProperty>
				<ClassProperty><ClassPropertyID Description="" Name="minValueMonth" TagName="月统计最小值"/>
					<comment/>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>实时项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType><TypeName>FLOAT</TypeName><Default></Default><Min></Min><Max></Max><Enum/></BasicType></ClassProperty>
				<ClassProperty><ClassPropertyID Description="" Name="minValueYear" TagName="年统计最小值"/>
					<comment/>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>实时项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType><TypeName>FLOAT</TypeName><Default></Default><Min></Min><Max></Max><Enum/></BasicType></ClassProperty>
				<ClassProperty><ClassPropertyID Description="" Name="statDay" TagName="当前统计日"/>
					<comment/>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>实时项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType><TypeName>UINT8</TypeName><Default></Default><Min></Min><Max></Max><Enum/></BasicType></ClassProperty>
				<ClassProperty><ClassPropertyID Description="" Name="statMonth" TagName="当前统计月"/>
					<comment/>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>实时项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType><TypeName>UINT8</TypeName><Default></Default><Min></Min><Max></Max><Enum/></BasicType></ClassProperty>
				<ClassProperty><ClassPropertyID Description="" Name="statYear" TagName="当前统计年"/>
					<comment/>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>实时项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType><TypeName>UINT16</TypeName><Default></Default><Min></Min><Max></Max><Enum/></BasicType></ClassProperty>
				<ClassProperty><ClassPropertyID Description="" Name="maxValuePreDay" TagName="上一日统计最大值"/>
					<comment/>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>实时项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType><TypeName>FLOAT</TypeName><Default></Default><Min></Min><Max></Max><Enum/></BasicType></ClassProperty>
				<ClassProperty><ClassPropertyID Description="" Name="maxValuePreMonth" TagName="上一月统计最大值"/>
					<comment/>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>实时项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType><TypeName>FLOAT</TypeName><Default></Default><Min></Min><Max></Max><Enum/></BasicType></ClassProperty>
				<ClassProperty><ClassPropertyID Description="" Name="maxValuePreYear" TagName="上一年统计最大值"/>
					<comment/>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>实时项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType><TypeName>FLOAT</TypeName><Default></Default><Min></Min><Max></Max><Enum/></BasicType></ClassProperty>
				<ClassProperty><ClassPropertyID Description="" Name="minValuePreDay" TagName="上一日统计最小值"/>
					<comment/>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>实时项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType><TypeName>FLOAT</TypeName><Default></Default><Min></Min><Max></Max><Enum/></BasicType></ClassProperty>
				<ClassProperty><ClassPropertyID Description="" Name="minValuePreMonth" TagName="上一月统计最小值"/>
					<comment/>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>实时项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType><TypeName>FLOAT</TypeName><Default></Default><Min></Min><Max></Max><Enum/></BasicType></ClassProperty>
				<ClassProperty><ClassPropertyID Description="" Name="minValuePreYear" TagName="上一年统计最小值"/>
					<comment/>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>实时项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType><TypeName>FLOAT</TypeName><Default></Default><Min></Min><Max></Max><Enum/></BasicType></ClassProperty></ClassPropertyList>
			<ClassBehavior>
				<CommandList>
					<Command>
						<FunctionName>MaxMinValueReset</FunctionName>
						<FunctionDes>最值复位</FunctionDes>
						<comment>复位最大值和最小值，并记录最值的强制清零时间</comment>
						<FuncParamTable>
							<FuncParamItem>
								<Name>user</Name>
								<Des>操作员名</Des>
								<ValueType>string</ValueType>
								<TransDirection>in</TransDirection>
								<comment/>
							</FuncParamItem>
							<FuncParamItem>
								<Name>pid</Name>
								<Des>被复位统计点的点号</Des>
								<ValueType>long</ValueType>
								<TransDirection>in</TransDirection>
								<comment/>
							</FuncParamItem>
						</FuncParamTable>
						<ReturnValue>
							<Type>long</Type>
							<Des>0成功，-1失败</Des>
						</ReturnValue>
					</Command>
				</CommandList>
				<OnEventList>
					<OnEvent><FunctionName>TimingReset</FunctionName><FunctionDes>统计值定时清零</FunctionDes>
						<EventInputList/>
						<TimerInputList>
							<TimerInput>
								<CalculationType>定时</CalculationType>
								<Impact>类级</Impact>
								<Time>00:00:01</Time></TimerInput>
						</TimerInputList>
						<EventProcessMode>同步</EventProcessMode>
						<comment>若当前统计日（月、年）与当前系统时间的日（月、年）不相等，刷新上一日（月、年）统计值为清零前相应的日（月、年）统计值,相应的日（月、年）统计值复位为0，当前统计日（月、年）为当前系统时间，然后执行统计值改变（Changed）输出事件。日定时器事件、月定时器事件、年定时器事件.在C++代码中实现月、年的定时清零判断。</comment>
					</OnEvent></OnEventList>
				<ReDefOnEventList/>
				<OutEventList>
					<OutEvent>
						<FunctionName>MaxMinValueChanged</FunctionName>
						<FunctionDes>最值改变</FunctionDes>
						<comment/>
						<ParamMode>简单参数</ParamMode>
						<ParamItem>
							<TransDirection>in</TransDirection>
							<ParamItemID Name="changeType" TagName="改变值类型" Description="0－最大值、最小值改变;1－最大值变化;2－最小值变化"/>
							<ValueType>INT8</ValueType>
							<comment/>
						</ParamItem>
					</OutEvent>
				</OutEventList>
				<VirtualInterfaceList>
					<VirtualInterface>
						<FunctionName>MaxMinValueUpdate</FunctionName>
						<FunctionDes>最值更新</FunctionDes>
						<comment>判断值变化时，先进行最值判断，更新最大最小值，执行最大最小值改变MaxMinValueChanged输出事件.</comment>
						<FuncParamTable/>
						<ReturnValue>
							<Type/>
							<Des/>
						</ReturnValue>
					</VirtualInterface>
				</VirtualInterfaceList>
				<OverLoadList>
					<OverLoad>
						<ClassRef>::POINT</ClassRef>
						<FunctionName>initialize</FunctionName>
						<FuncType>虚函数</FuncType>
						<Des>先调用基类initialize函数，然后调用MaxMinValueReset命令函数, 最大值和最小值均复位。</Des>
					</OverLoad>
				</OverLoadList>
				<ClassBehaviorVersion>1289539404</ClassBehaviorVersion>
			</ClassBehavior>
		</Class>
		<Class CreateDate="2008-11-18" Creator="zhoujin">
			<ClassID TagName="模拟量输出点" Description="" Name="AO" GlobalName="AO"/>
			<ClassInfo>
				<BaseClassRef GlobalName="Variable" RefVersion="1"/>
				<Instanteable>可实例化</Instanteable>
			</ClassInfo>
			<ClassVersion>1273129924</ClassVersion>
			<comment/>
			<ClassPropertyList>
				<ClassPropertyVersion>1156924812</ClassPropertyVersion>
				<ClassProperty>
					<ClassPropertyID Name="value" TagName="当前控制输出值" Description=""/>
					<comment/>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>不可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>实时项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType>
						<TypeName>FLOAT</TypeName>
						<Default/>
						<Min/>
						<Max/>
						<Enum/>
					</BasicType>
					<HDBItemConfig>
						<ValueTime ConfigValue="valueTime" ConfigType="属性名"/>
						<ValueState ConfigValue="status" ConfigType="属性名"/>
						<UT ConfigValue="UT" ConfigType="属性名"/>
						<OF ConfigValue="OF" ConfigType="属性名"/>
						<UpLimit ConfigValue="MU" ConfigType="属性名"/>
						<DownLimit ConfigValue="MD" ConfigType="属性名"/>
						<DeadZone ConfigValue="0.005" ConfigType="默认值"/>
						<DeadZoneType>百分比</DeadZoneType>
					</HDBItemConfig>
				</ClassProperty>
				<ClassProperty>
					<ClassPropertyID Name="previousValue" TagName="前次值" Description=""/>
					<comment/>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>不可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>实时项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType>
						<TypeName>FLOAT</TypeName>
						<Default/>
						<Min/>
						<Max/>
						<Enum/>
					</BasicType>
				</ClassProperty>
				<ClassProperty>
					<ClassPropertyID Name="MU" TagName="量程上限" Description=""/>
					<comment/>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>参数项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType>
						<TypeName>FLOAT</TypeName>
						<Default/>
						<Min/>
						<Max/>
						<Enum/>
					</BasicType>
				</ClassProperty>
				<ClassProperty>
					<ClassPropertyID Name="MD" TagName="量程下限" Description=""/>
					<comment/>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>参数项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType>
						<TypeName>FLOAT</TypeName>
						<Default/>
						<Min/>
						<Max/>
						<Enum/>
					</BasicType>
				</ClassProperty>
				<ClassProperty>
					<ClassPropertyID Name="OF" TagName="显示格式" Description=""/>
					<comment>C++支持的显示格式字符串，如"%6.3f"，必须与值类型相匹配</comment>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>参数项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType>
						<TypeName>STRING8</TypeName>
						<Default/>
						<Min/>
						<Max/>
						<Enum/>
					</BasicType>
				</ClassProperty>
				<ClassProperty>
					<ClassPropertyID Name="UT" TagName="单位（量纲）" Description=""/>
					<comment/>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>参数项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType>
						<TypeName>STRING8</TypeName>
						<Default/>
						<Min/>
						<Max/>
						<Enum/>
					</BasicType>
				</ClassProperty>
			</ClassPropertyList>
			<ClassBehavior>
				<CommandList>
					<Command>
						<FunctionName>SetChannel</FunctionName>
						<FunctionDes>通道输出</FunctionDes>
						<comment/>
						<FuncParamTable>
							<FuncParamItem>
								<Name>user</Name>
								<Des>操作员名</Des>
								<ValueType>string</ValueType>
								<TransDirection>in</TransDirection>
								<comment/>
							</FuncParamItem>
							<FuncParamItem>
								<Name>pid</Name>
								<Des>被控点的点号</Des>
								<ValueType>long</ValueType>
								<TransDirection>in</TransDirection>
								<comment/>
							</FuncParamItem>
							<FuncParamItem>
								<Name>val</Name>
								<Des>给定值</Des>
								<ValueType>float</ValueType>
								<TransDirection>in</TransDirection>
								<comment/>
							</FuncParamItem>
						</FuncParamTable>
						<ReturnValue>
							<Type>long</Type>
							<Des>0命令发送成功,-1失败</Des>
						</ReturnValue>
					</Command>
				</CommandList>
				<OnEventList/>
				<ReDefOnEventList/>
				<OutEventList>
				</OutEventList>
				<VirtualInterfaceList>
				</VirtualInterfaceList>
				<OverLoadList>
					<OverLoad>
						<ClassRef>POINT</ClassRef>
						<FunctionName>sync_period</FunctionName>
						<FuncType>虚函数</FuncType>
						<Des>模拟量的同步周期为基准周期的4倍，一般2秒</Des>
					</OverLoad>
					<OverLoad>
						<ClassRef>Variable</ClassRef>
						<FunctionName>ValueChanged</FunctionName>
						<FuncType>输出事件</FuncType>
						<Des/>
					</OverLoad>
					<OverLoad>
						<ClassRef>Variable</ClassRef>
						<FunctionName>DataScan</FunctionName>
						<FuncType>虚函数</FuncType>
						<Des>vaule_len应为sizeof(MACS_FLOAT),pValue实际值为 *(MACS_FLOAT*)pValue</Des>
					</OverLoad>
					<OverLoad>
						<ClassRef>Variable</ClassRef>
						<FunctionName>write_ioconfig</FunctionName>
						<FuncType>虚函数</FuncType>
						<Des/>
					</OverLoad>
					<OverLoad>
						<ClassRef>POINT</ClassRef>
						<FunctionName>is_valid</FunctionName><FuncType>虚函数</FuncType>
						<Des>输出变量要求外部标签不能为空</Des>
					</OverLoad>
					<OverLoad>
						<ClassRef>POINT</ClassRef>
						<FunctionName>do_setItem</FunctionName><FuncType>虚函数</FuncType>
						<Des>重载增加字节序转换</Des>
					</OverLoad>
				</OverLoadList>
				<ClassBehaviorVersion>1273129924</ClassBehaviorVersion>
			</ClassBehavior>
		</Class>
		<Class CreateDate="2008-11-18" Creator="zhoujin">
			<ClassID TagName="（单位）开关量输出点" Description="" Name="DO" GlobalName="DO"/>
			<ClassInfo>
				<BaseClassRef GlobalName="Variable" RefVersion="1"/>
				<Instanteable>可实例化</Instanteable>
			</ClassInfo>
			<ClassVersion>1280383874</ClassVersion>
			<comment/>
			<ClassPropertyList>
				<ClassPropertyVersion>1156924891</ClassPropertyVersion>
				<ClassProperty>
					<ClassPropertyID Name="value" TagName="当前控制输出值" Description=""/>
					<comment/>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>不可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>实时项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType>
						<TypeName>INT8</TypeName>
						<Default/>
						<Min/>
						<Max/>
						<Enum/>
					</BasicType>
					<HDBItemConfig>
						<ValueTime ConfigValue="valueTime" ConfigType="属性名"/>
						<ValueState ConfigValue="status" ConfigType="属性名"/>
						<UT ConfigValue="" ConfigType="无"/>
						<OF ConfigValue="%d" ConfigType="默认值"/>
						<UpLimit ConfigValue="1" ConfigType="默认值"/>
						<DownLimit ConfigValue="0" ConfigType="默认值"/>
						<DeadZone ConfigValue="" ConfigType="无"/>
						<DeadZoneType>绝对值</DeadZoneType>
					</HDBItemConfig>
				</ClassProperty>
				<ClassProperty>
					<ClassPropertyID Name="previousValue" TagName="前次值" Description=""/>
					<comment/>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>不可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>实时项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType>
						<TypeName>INT8</TypeName>
						<Default/>
						<Min/>
						<Max/>
						<Enum/>
					</BasicType>
				</ClassProperty>
				<ClassProperty>
					<ClassPropertyID TagName="置0说明" Description="" Name="E0"/>
					<comment/>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>参数项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType>
						<TypeName>STRING8</TypeName>
						<Default/>
						<Min/>
						<Max/>
						<Enum/>
					</BasicType>
				</ClassProperty>
				<ClassProperty>
					<ClassPropertyID TagName="置1说明" Description="" Name="E1"/>
					<comment/>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>参数项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType>
						<TypeName>STRING8</TypeName>
						<Default/>
						<Min/>
						<Max/>
						<Enum/>
					</BasicType>
				</ClassProperty>
			</ClassPropertyList>
			<ClassBehavior>
				<CommandList>
					<Command>
						<FunctionName>SetChannel</FunctionName>
						<FunctionDes>通道输出</FunctionDes>
						<comment/>
						<FuncParamTable>
							<FuncParamItem>
								<Name>user</Name>
								<Des>操作员名</Des>
								<ValueType>string</ValueType>
								<TransDirection>in</TransDirection>
								<comment/>
							</FuncParamItem>
							<FuncParamItem>
								<Name>pid</Name>
								<Des>被控点的点号</Des>
								<ValueType>long</ValueType>
								<TransDirection>in</TransDirection>
								<comment/>
							</FuncParamItem>
							<FuncParamItem>
								<Name>val</Name>
								<Des>给定值</Des>
								<ValueType>boolean</ValueType>
								<TransDirection>in</TransDirection>
								<comment>false置为0状态，true置为1状态</comment>
							</FuncParamItem>
						</FuncParamTable>
						<ReturnValue>
							<Type>long</Type>
							<Des>0命令发送成功,-1失败</Des>
						</ReturnValue>
					</Command>
					<Command><FunctionName>SetChannelPulse</FunctionName><FunctionDes>脉冲输出命令</FunctionDes>
						<comment/>
						<FuncParamTable>
							<FuncParamItem>
								<Name>user</Name>
								<Des>操作员名</Des>
								<ValueType>string</ValueType>
								<TransDirection>in</TransDirection>
								<comment/>
							</FuncParamItem>
							<FuncParamItem>
								<Name>pid</Name>
								<Des>被控点的点号</Des>
								<ValueType>long</ValueType>
								<TransDirection>in</TransDirection>
								<comment/>
							</FuncParamItem>
							<FuncParamItem>
								<Name>val</Name><Des>给定值</Des>
								<ValueType>boolean</ValueType>
								<TransDirection>in</TransDirection>
								<comment>false置为0状态，true置为1状态</comment>
							</FuncParamItem>
							<FuncParamItem>
								<Name>time</Name><Des>脉冲保持时间</Des>
								<ValueType>long</ValueType>
								<TransDirection>in</TransDirection>
								<comment/>
							</FuncParamItem>
						</FuncParamTable>
						<ReturnValue>
							<Type>long</Type>
							<Des>0成功，-1失败</Des>
						</ReturnValue>
					</Command></CommandList>
				<OnEventList/>
				<ReDefOnEventList/>
				<OutEventList>
				</OutEventList>
				<VirtualInterfaceList>
				</VirtualInterfaceList>
				<OverLoadList>
					<OverLoad>
						<ClassRef>POINT</ClassRef>
						<FunctionName>sync_period</FunctionName>
						<FuncType>虚函数</FuncType>
						<Des>开关量的同步周期为基准周期的2倍，一般1秒</Des>
					</OverLoad>
					<OverLoad>
						<ClassRef>Variable</ClassRef>
						<FunctionName>ValueChanged</FunctionName>
						<FuncType>输出事件</FuncType>
						<Des/>
					</OverLoad>
					<OverLoad>
						<ClassRef>Variable</ClassRef>
						<FunctionName>DataScan</FunctionName>
						<FuncType>虚函数</FuncType>
						<Des>vaule_len应为sizeof(MACS_INT8),pValue实际值为 *(MACS_INT8*)pValue</Des>
					</OverLoad>
					<OverLoad>
						<ClassRef>Variable</ClassRef>
						<FunctionName>write_ioconfig</FunctionName>
						<FuncType>虚函数</FuncType>
						<Des/>
					</OverLoad>
					<OverLoad>
						<ClassRef>POINT</ClassRef>
						<FunctionName>is_valid</FunctionName><FuncType>虚函数</FuncType>
						<Des>输出变量要求外部标签不能为空</Des>
					</OverLoad>
					<OverLoad>
						<ClassRef>POINT</ClassRef>
						<FunctionName>do_setItem</FunctionName><FuncType>虚函数</FuncType>
						<Des>输出型变量，外部标签不能修改为空</Des>
					</OverLoad>
				</OverLoadList>
				<ClassBehaviorVersion>1280383874</ClassBehaviorVersion>
			</ClassBehavior>
		</Class>
		<Class CreateDate="2008-11-18" Creator="zhoujin">
			<ClassID TagName="字符串输出点" Description="" Name="SO" GlobalName="SO"/>
			<ClassInfo>
				<BaseClassRef GlobalName="Variable" RefVersion="1"/>
				<Instanteable>可实例化</Instanteable>
			</ClassInfo>
			<ClassVersion>1280383892</ClassVersion>
			<comment/>
			<ClassPropertyList>
				<ClassPropertyVersion>1127700723</ClassPropertyVersion>
				<ClassProperty>
					<ClassPropertyID Name="value" TagName="当前控制输出值" Description=""/>
					<comment/>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>不可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>实时项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType>
						<TypeName>STRING256</TypeName>
						<Default/>
						<Min/>
						<Max/>
						<Enum/>
					</BasicType>
				</ClassProperty>
				<ClassProperty>
					<ClassPropertyID Name="previousValue" TagName="前次值" Description=""/>
					<comment/>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>不可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>实时项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType>
						<TypeName>STRING256</TypeName>
						<Default/>
						<Min/>
						<Max/>
						<Enum/>
					</BasicType>
				</ClassProperty>
				<ClassProperty>
					<ClassPropertyID TagName="字符串有效长度" Description="当前值字符串长度，有效范围为0～256" Name="valueLength"/>
					<comment/>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>不可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>实时项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType>
						<TypeName>UINT32</TypeName>
						<Default/>
						<Min/>
						<Max/>
						<Enum/>
					</BasicType>
				</ClassProperty>
			</ClassPropertyList>
			<ClassBehavior>
				<CommandList>
					<Command>
						<FunctionName>SetChannel</FunctionName>
						<FunctionDes>通道输出</FunctionDes>
						<comment/>
						<FuncParamTable>
							<FuncParamItem>
								<Name>user</Name>
								<Des>操作员名</Des>
								<ValueType>string</ValueType>
								<TransDirection>in</TransDirection>
								<comment/>
							</FuncParamItem>
							<FuncParamItem>
								<Name>pid</Name>
								<Des>被控点的点号</Des>
								<ValueType>long</ValueType>
								<TransDirection>in</TransDirection>
								<comment/>
							</FuncParamItem>
							<FuncParamItem>
								<Name>val</Name>
								<Des>给定值</Des>
								<ValueType>string</ValueType>
								<TransDirection>in</TransDirection>
								<comment/>
							</FuncParamItem>
						</FuncParamTable>
						<ReturnValue>
							<Type>long</Type>
							<Des>0命令发送成功,-1失败</Des>
						</ReturnValue>
					</Command>
				</CommandList>
				<OnEventList/>
				<ReDefOnEventList/>
				<OutEventList>
				</OutEventList>
				<VirtualInterfaceList>
				</VirtualInterfaceList>
				<OverLoadList>
					<OverLoad>
						<ClassRef>POINT</ClassRef>
						<FunctionName>sync_period</FunctionName>
						<FuncType>虚函数</FuncType>
						<Des>模拟量的同步周期为基准周期的4倍，一般2秒</Des>
					</OverLoad>
					<OverLoad>
						<ClassRef>Variable</ClassRef>
						<FunctionName>ValueChanged</FunctionName>
						<FuncType>输出事件</FuncType>
						<Des/>
					</OverLoad>
					<OverLoad>
						<ClassRef>Variable</ClassRef>
						<FunctionName>DataScan</FunctionName>
						<FuncType>虚函数</FuncType>
						<Des>vaule_len应为strlen( char*)pValue )，并且应小于等于256, pValue实际值为 (char*)pValue</Des>
					</OverLoad>
					<OverLoad>
						<ClassRef>Variable</ClassRef>
						<FunctionName>write_ioconfig</FunctionName>
						<FuncType>虚函数</FuncType>
						<Des/>
					</OverLoad>
					<OverLoad>
						<ClassRef>POINT</ClassRef>
						<FunctionName>is_valid</FunctionName><FuncType>虚函数</FuncType>
						<Des>输出变量要求外部标签不能为空</Des>
					</OverLoad>
					<OverLoad>
						<ClassRef>POINT</ClassRef>
						<FunctionName>do_setItem</FunctionName><FuncType>虚函数</FuncType>
						<Des>输出型变量，外部标签不能修改为空</Des>
					</OverLoad>
				</OverLoadList>
				<ClassBehaviorVersion>1280383892</ClassBehaviorVersion>
			</ClassBehavior>
		</Class>
		<Class CreateDate="2008-11-18" Creator="zhoujin">
			<ClassID Description="当需要定义DI2的2或3状态报警时，可在实例中重定义报警子对象cosAlarm的类型为ALMD--&gt;AMLD2" Name="ALMD2" TagName="双位开关量报警点" GlobalName="ALMD2"/>
			<ClassInfo>
				<BaseClassRef GlobalName="ALMD" RefVersion="1"/>
				<Instanteable>可实例化</Instanteable>
			</ClassInfo>
			<ClassVersion>1298944353</ClassVersion>
			<comment>
			</comment>
			<ClassPropertyList>
				<ClassPropertyVersion>1298944353</ClassPropertyVersion>
				<ClassProperty>
					<ClassPropertyID Description="" Name="alarmLevel2" TagName="2状态报警级"/>
					<comment>报警级数字越大表示越严重，外部可显示为“紧急、普通”等不同的描述文字。仿照OPC标准，规定：高81 -- 100，中高 61 -- 80，中41 -- 60，中低21 -- 40，低1 -- 20</comment>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>参数项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType>
						<TypeName>INT8</TypeName>
						<Default>1</Default>
						<Min>1</Min>
						<Max>100</Max>
						<Enum>
							<EnumItem Value="1" TagValue="最低报警级"/>
							<EnumItem Value="20" TagValue="低报警级"/>
							<EnumItem Value="40" TagValue="中低报警级"/>
							<EnumItem Value="60" TagValue="中报警级"/>
							<EnumItem Value="80" TagValue="中高报警级"/>
							<EnumItem Value="100" TagValue="高报警级"/>
						</Enum>
					</BasicType>
				</ClassProperty>
				<ClassProperty>
					<ClassPropertyID Description="" Name="alarmLevel3" TagName="3状态报警级"/>
					<comment>报警级数字越大表示越严重，外部可显示为“紧急、普通”等不同的描述文字。仿照OPC标准，规定：高81 -- 100，中高 61 -- 80，中41 -- 60，中低21 -- 40，低1 -- 20</comment>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>参数项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType>
						<TypeName>INT8</TypeName>
						<Default>1</Default>
						<Min>1</Min>
						<Max>100</Max>
						<Enum>
							<EnumItem Value="1" TagValue="最低报警级"/>
							<EnumItem Value="20" TagValue="低报警级"/>
							<EnumItem Value="40" TagValue="中低报警级"/>
							<EnumItem Value="60" TagValue="中报警级"/>
							<EnumItem Value="80" TagValue="中高报警级"/>
							<EnumItem Value="100" TagValue="高报警级"/>
						</Enum>
					</BasicType>
				</ClassProperty>
				<ClassProperty>
					<ClassPropertyID Description="定义双位开关2状态的报警要求，0(false)不报警，1(true)报警" Name="alarmRequire2" TagName="2状态是否报警"/>
					<comment/>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>参数项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType>
						<TypeName>LOGICAL</TypeName>
						<Default>0</Default>
						<Min>0</Min>
						<Max>1</Max>
						<Enum/>
					</BasicType>
				</ClassProperty>
				<ClassProperty><ClassPropertyID Description="定义双位开关3状态的报警要求，0(false)不报警，1(true)报警" TagName="3状态是否报警" Name="alarmRequire3"/>
					<comment/>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>参数项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType>
						<TypeName>LOGICAL</TypeName>
						<Default>0</Default>
						<Min>0</Min>
						<Max>1</Max>
						<Enum/>
					</BasicType>
				</ClassProperty></ClassPropertyList>
			<ClassBehavior>
				<CommandList/>
				<OnEventList/>
				<ReDefOnEventList/>
				<OutEventList/>
				<VirtualInterfaceList/>
				<OverLoadList>
					<OverLoad>
						<ClassRef>ALM</ClassRef>
						<FunctionName>judge</FunctionName>
						<FuncType>虚函数</FuncType>
						<Des>双位开关量状态报警实现体</Des>
					</OverLoad>
					<OverLoad>
						<ClassRef>ALM</ClassRef>
						<FunctionName>getCurAlarmLevel</FunctionName>
						<FuncType>虚函数</FuncType>
						<Des/>
					</OverLoad>
					<OverLoad>
						<ClassRef>POINT</ClassRef>
						<FunctionName>is_valid</FunctionName><FuncType>虚函数</FuncType>
						<Des>如果定义了报警要求则报警级不能为不报警（0）</Des>
					</OverLoad>
				</OverLoadList>
				<ClassBehaviorVersion>1230171661</ClassBehaviorVersion>
			</ClassBehavior>
		</Class>
		<Class CreateDate="2008-12-19" Creator="zhoujin"><ClassID Description="通过8个通道采集上来的数值通过二进制与十进制的转换方式变为INT32类型" Name="VI8" TagName="支持8通道的离散数字量输入点" GlobalName="VI8"/>
			<ClassInfo>
				<BaseClassRef GlobalName="VI" RefVersion="1"/>
				<Instanteable>可实例化</Instanteable>
			</ClassInfo>
			<ClassVersion>1231832627</ClassVersion>
			<comment>
			</comment>
			<ClassPropertyList>
				<ClassPropertyVersion>1230173946</ClassPropertyVersion>
				<ClassProperty><ClassPropertyID Description="外部变量1在externTag属性中定义，本表为外部变量2至外部变量8" TagName="外部变量表" Name="externTagTable"/>
					<comment/>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>参数项</RealTimeChar>
					</PropertyProcessChar>
					<Size>7</Size>
					<ValueType>结构</ValueType>
					<StructType>
						<Declaration>true</Declaration>
						<Struct>
							<StructID Name="LocalStruct" TagName="自定义结构" Description=" " GlobalName="VI8_externTagTable_S"/>
							<StructVersion>1</StructVersion>
							<comment>
							</comment>
							<StructPropertyList>
								<StructProperty>
									<StructPropertyID Name="externTag" TagName="外部变量" Description=""/>
									<comment/>
									<ValueType>STRING16</ValueType>
								</StructProperty>
							</StructPropertyList>
						</Struct>
					</StructType>
				</ClassProperty>
			</ClassPropertyList>
			<ClassBehavior>
				<CommandList/>
				<OnEventList/>
				<ReDefOnEventList/>
				<OutEventList/>
				<VirtualInterfaceList/>
				<OverLoadList>
					<OverLoad>
						<ClassRef>VI</ClassRef>
						<FunctionName>Force</FunctionName><FuncType>命令</FuncType>
						<Des/>
					</OverLoad>
					<OverLoad>
						<ClassRef>VI</ClassRef>
						<FunctionName>Forbid</FunctionName><FuncType>命令</FuncType>
						<Des/>
					</OverLoad>
					<OverLoad>
						<ClassRef>Variable</ClassRef>
						<FunctionName>write_ioconfig</FunctionName><FuncType>虚函数</FuncType>
						<Des/>
					</OverLoad>
					<OverLoad>
						<ClassRef>Variable</ClassRef>
						<FunctionName>DataScan</FunctionName><FuncType>虚函数</FuncType>
						<Des/>
					</OverLoad>
					<OverLoad>
						<ClassRef>POINT</ClassRef>
						<FunctionName>do_setItem</FunctionName><FuncType>虚函数</FuncType>
						<Des>将设定值分解为各个通道对应值并发送给FEP</Des>
					</OverLoad>
					<OverLoad>
						<ClassRef>POINT</ClassRef>
						<FunctionName>is_valid</FunctionName><FuncType>虚函数</FuncType>
						<Des>VI8应必须至少配置一个通道</Des>
					</OverLoad>
					<OverLoad>
						<ClassRef>POINT</ClassRef>
						<FunctionName>initialize</FunctionName><FuncType>虚函数</FuncType>
						<Des>得到实际配置的通道个数</Des>
					</OverLoad>
				</OverLoadList>
				<ClassBehaviorVersion>1231832627</ClassBehaviorVersion>
			</ClassBehavior>
		</Class><Class CreateDate="2011-02-25" Creator="zhoujin"><ClassID TagName="离散数字量输入点EX" Description="" Name="VIEX" GlobalName="VIEX"/>
			<ClassInfo>
				<BaseClassRef GlobalName="Variable" RefVersion="1"/>
				<Instanteable>可实例化</Instanteable>
			</ClassInfo>
			<ClassVersion>1298622095</ClassVersion>
			<comment>本类点用于采集I/O服务器上的数字量点，采集值和有效/无效状态来自I/O服务器。支持256维</comment>
			<ClassPropertyList>
				<ClassPropertyVersion>1298622095</ClassPropertyVersion>
				<ClassProperty>
					<ClassPropertyID Description="" Name="value" TagName="当前值"/>
					<comment/>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>不可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>实时项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType>
						<TypeName>INT32</TypeName>
						<Default/>
						<Min/>
						<Max/>
						<Enum/>
					</BasicType>
					<HDBItemConfig>
						<ValueTime ConfigValue="valueTime" ConfigType="属性名"/>
						<ValueState ConfigValue="status" ConfigType="属性名"/>
						<UT ConfigValue="" ConfigType="属性名"/>
						<OF ConfigValue="" ConfigType="属性名"/>
						<UpLimit ConfigValue="" ConfigType="属性名"/>
						<DownLimit ConfigValue="" ConfigType="属性名"/>
						<DeadZone ConfigValue="" ConfigType="属性名"/>
						<DeadZoneType>绝对值</DeadZoneType>
					</HDBItemConfig>
				</ClassProperty>
				<ClassProperty>
					<ClassPropertyID Description="" Name="previousValue" TagName="前次值"/>
					<comment/>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>不可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>实时项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType>
						<TypeName>INT32</TypeName>
						<Default/>
						<Min/>
						<Max/>
						<Enum/>
					</BasicType>
				</ClassProperty>
				<ClassProperty><ClassPropertyID Description="报警监视子对象，引用ALMV类对象及其子类对象" Name="cosAlarm" TagName="变位报警"/>
					<comment>对于每个value值，相应的报警条件和报警级定义在本子对象中，没有报警要求则子对象为空。</comment>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>参数项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>子对象</ValueType>
					<SubObjClassRef GlobalName="ALMV" RefVersion="1"/>
				</ClassProperty>
				<ClassProperty><ClassPropertyID Description="有效值应向前紧凑排列" TagName="值信息结构" Name="valueInfoTable"/>
					<comment>目前暂定为8维，待支持变长结构后再做修改</comment>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>参数项</RealTimeChar>
					</PropertyProcessChar>
					<Size>256</Size>
					<ValueType>结构</ValueType>
					<StructType>
						<Declaration>true</Declaration>
						<Struct>
							<StructID Name="LocalStruct" TagName="自定义结构" Description=" " GlobalName="VIEX_valueInfoTable_S"/>
							<StructVersion>1</StructVersion>
							<comment>
							</comment>
							<StructPropertyList>
								<StructProperty>
									<StructPropertyID Name="value" TagName="采集值" Description=""/>
									<comment/>
									<ValueType>INT32</ValueType>
								</StructProperty>
								<StructProperty>
									<StructPropertyID Name="label" TagName="值说明" Description=""/>
									<comment/>
									<ValueType>STRING32</ValueType>
								</StructProperty>
							</StructPropertyList>
						</Struct>
					</StructType>
				</ClassProperty>
				<ClassProperty><ClassPropertyID Description="用于控制是否生成数字量值变化日志，0(false)不生成，1(true)生成" TagName="是否生成值变化日志" Name="cosLog"/>
					<comment/>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>参数项</RealTimeChar>
					</PropertyProcessChar>
					<Size>1</Size>
					<ValueType>基本数据类型</ValueType>
					<BasicType>
						<TypeName>LOGICAL</TypeName>
						<Default>0</Default>
						<Min>0</Min>
						<Max>1</Max>
						<Enum/>
					</BasicType>
				</ClassProperty></ClassPropertyList>
			<ClassBehavior>
				<CommandList>
					<Command>
						<FunctionName>Force</FunctionName>
						<FunctionDes>强制</FunctionDes>
						<comment/>
						<FuncParamTable>
							<FuncParamItem>
								<Name>user</Name>
								<Des>操作员名</Des>
								<ValueType>string</ValueType>
								<TransDirection>in</TransDirection>
								<comment/>
							</FuncParamItem>
							<FuncParamItem>
								<Name>pid</Name>
								<Des>被强制点的点号</Des>
								<ValueType>long</ValueType>
								<TransDirection>in</TransDirection>
								<comment/>
							</FuncParamItem>
							<FuncParamItem>
								<Name>start_or_end</Name>
								<Des>强制开始还是取消强制，true强制，false取消</Des>
								<ValueType>boolean</ValueType>
								<TransDirection>in</TransDirection>
								<comment/>
							</FuncParamItem>
							<FuncParamItem>
								<Name>val</Name>
								<Des>给定的强制值，只有当start_or_end为true时有意义</Des>
								<ValueType>long</ValueType>
								<TransDirection>in</TransDirection>
								<comment/>
							</FuncParamItem>
						</FuncParamTable>
						<ReturnValue>
							<Type>long</Type>
							<Des>0成功，-1失败</Des>
						</ReturnValue>
					</Command>
					<Command>
						<FunctionName>Forbid</FunctionName>
						<FunctionDes>禁止</FunctionDes>
						<comment/>
						<FuncParamTable>
							<FuncParamItem>
								<Name>user</Name>
								<Des>操作员名</Des>
								<ValueType>string</ValueType>
								<TransDirection>in</TransDirection>
								<comment/>
							</FuncParamItem>
							<FuncParamItem>
								<Name>pid</Name>
								<Des>被控点的点号</Des>
								<ValueType>long</ValueType>
								<TransDirection>in</TransDirection>
								<comment/>
							</FuncParamItem>
							<FuncParamItem>
								<Name>start_or_end</Name><Des>禁止开始还是取消禁止，true禁止，false取消</Des>
								<ValueType>boolean</ValueType>
								<TransDirection>in</TransDirection>
								<comment/>
							</FuncParamItem>
						</FuncParamTable>
						<ReturnValue>
							<Type>long</Type>
							<Des>0成功，-1失败</Des>
						</ReturnValue>
					</Command>
				</CommandList>
				<OnEventList/>
				<ReDefOnEventList/>
				<OutEventList/>
				<VirtualInterfaceList>
				</VirtualInterfaceList>
				<OverLoadList>
					<OverLoad>
						<ClassRef>POINT</ClassRef>
						<FunctionName>do_setItem</FunctionName>
						<FuncType>虚函数</FuncType>
						<Des>负责处理直接修改内部变量的当前值，其它由基类处理</Des>
					</OverLoad>
					<OverLoad>
						<ClassRef>Variable</ClassRef>
						<FunctionName>ValueChanged</FunctionName>
						<FuncType>输出事件</FuncType>
						<Des/>
					</OverLoad>
					<OverLoad>
						<ClassRef>POINT</ClassRef>
						<FunctionName>sync_period</FunctionName>
						<FuncType>虚函数</FuncType>
						<Des/>
					</OverLoad>
					<OverLoad>
						<ClassRef>Variable</ClassRef>
						<FunctionName>DataScan</FunctionName>
						<FuncType>虚函数</FuncType>
						<Des>vaule_len应为sizeof(MACS_INT32), pValue实际值为 *(MACS_INT32*)pValue</Des>
					</OverLoad>
					<OverLoad>
						<ClassRef>Variable</ClassRef>
						<FunctionName>write_ioconfig</FunctionName>
						<FuncType>虚函数</FuncType>
						<Des/>
					</OverLoad>
				</OverLoadList>
				<ClassBehaviorVersion>1242625628</ClassBehaviorVersion>
			</ClassBehavior>
		</Class><Class CreateDate="2011-02-25" Creator="zhoujin"><ClassID Description="通过32通道采集上来的数值通过二进制与十进制的转换方式变为INT32类型" TagName="支持32通道的离散数字量输入点" Name="VI32" GlobalName="VI32"/>
			<ClassInfo>
				<BaseClassRef GlobalName="VI" RefVersion="1"/>
				<Instanteable>可实例化</Instanteable>
			</ClassInfo>
			<ClassVersion>1298862111</ClassVersion>
			<comment>
			</comment>
			<ClassPropertyList>
				<ClassPropertyVersion>1298861469</ClassPropertyVersion>
				<ClassProperty><ClassPropertyID Description="外部变量1在externTag属性中定义，本表为外部变量2至外部变量8" TagName="外部变量表" Name="externTagTable"/>
					<comment/>
					<PropertyProcessChar>
						<StoreChar>自动</StoreChar>
						<EditChar>可组态</EditChar>
						<VisibleChar>可视</VisibleChar>
						<RealTimeChar>参数项</RealTimeChar>
					</PropertyProcessChar>
					<Size>31</Size>
					<ValueType>结构</ValueType>
					<StructType>
						<Declaration>true</Declaration>
						<Struct>
							<StructID Name="LocalStruct" TagName="自定义结构" Description=" " GlobalName="VI32_externTagTable_S"/>
							<StructVersion>1</StructVersion>
							<comment>
							</comment>
							<StructPropertyList>
								<StructProperty>
									<StructPropertyID Name="externTag" TagName="外部变量" Description=""/>
									<comment/>
									<ValueType>STRING16</ValueType>
								</StructProperty>
							</StructPropertyList>
						</Struct>
					</StructType>
				</ClassProperty>
			</ClassPropertyList>
			<ClassBehavior>
				<CommandList/>
				<OnEventList/>
				<ReDefOnEventList/>
				<OutEventList/>
				<VirtualInterfaceList/>
				<OverLoadList>
					<OverLoad>
						<ClassRef>VI</ClassRef>
						<FunctionName>Force</FunctionName><FuncType>命令</FuncType>
						<Des/>
					</OverLoad>
					<OverLoad>
						<ClassRef>VI</ClassRef>
						<FunctionName>Forbid</FunctionName><FuncType>命令</FuncType>
						<Des/>
					</OverLoad>
					<OverLoad>
						<ClassRef>Variable</ClassRef>
						<FunctionName>write_ioconfig</FunctionName><FuncType>虚函数</FuncType>
						<Des/>
					</OverLoad>
					<OverLoad>
						<ClassRef>Variable</ClassRef>
						<FunctionName>DataScan</FunctionName><FuncType>虚函数</FuncType>
						<Des/>
					</OverLoad>
					<OverLoad>
						<ClassRef>POINT</ClassRef>
						<FunctionName>do_setItem</FunctionName><FuncType>虚函数</FuncType>
						<Des>将设定值分解为各个通道对应值并发送给FEP</Des>
					</OverLoad>
					<OverLoad>
						<ClassRef>POINT</ClassRef>
						<FunctionName>is_valid</FunctionName><FuncType>虚函数</FuncType>
						<Des>VI8应必须至少配置一个通道</Des>
					</OverLoad>
					<OverLoad>
						<ClassRef>POINT</ClassRef>
						<FunctionName>initialize</FunctionName><FuncType>虚函数</FuncType>
						<Des>得到实际配置的通道个数</Des>
					</OverLoad>
				</OverLoadList>
				<ClassBehaviorVersion>1231832627</ClassBehaviorVersion>
			</ClassBehavior>
		</Class></ClassList>
</ClassFamily>
